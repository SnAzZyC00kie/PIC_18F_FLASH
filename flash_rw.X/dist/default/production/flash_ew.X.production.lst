

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Mar 24 19:59:19 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 1.41
    34                           ; Generated 25/01/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4520 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	smallconst
    69  000600                     __psmallconst:
    70                           	opt stack 0
    71  000600  00                 	db	0
    72  000601                     _hexpowers:
    73                           	opt stack 0
    74  000601  0001               	dw	1
    75  000603  0010               	dw	16
    76  000605  0100               	dw	256
    77  000607  1000               	dw	4096
    78  000609                     __end_of_hexpowers:
    79                           	opt stack 0
    80  000609                     _program_start:
    81                           	opt stack 0
    82  000609  50                 	db	80
    83  00060A  72                 	db	114
    84  00060B  6F                 	db	111
    85  00060C  67                 	db	103
    86  00060D  72                 	db	114
    87  00060E  61                 	db	97
    88  00060F  6D                 	db	109
    89  000610  20                 	db	32
    90  000611  73                 	db	115
    91  000612  74                 	db	116
    92  000613  61                 	db	97
    93  000614  72                 	db	114
    94  000615  74                 	db	116
    95  000616  0A                 	db	10
    96  000617  0D                 	db	13
    97  000618                     __end_of_program_start:
    98                           	opt stack 0
    99  0000                     _TBLPTR	set	4086
   100  0000                     _RCREG	set	4014
   101  0000                     _TXREG	set	4013
   102  0000                     _PIE1bits	set	3997
   103  0000                     _IPR1bits	set	3999
   104  0000                     _TXSTAbits	set	4012
   105  0000                     _BAUDCONbits	set	4024
   106  0000                     _RCSTAbits	set	4011
   107  0000                     _SPBRG	set	4015
   108  0000                     _SPBRGH	set	4016
   109  0000                     _TRISCbits	set	3988
   110  0000                     _RCONbits	set	4048
   111  0000                     _LATB	set	3978
   112  0000                     _TRISB	set	3987
   113  0000                     _OSCCONbits	set	4051
   114  0000                     _EECON2	set	4007
   115  0000                     _INTCONbits	set	4082
   116  0000                     _EECON1bits	set	4006
   117  0000                     _TABLAT	set	4085
   118  000618                     STR_2:
   119  000618  30                 	db	48	;'0'
   120  000619  31                 	db	49	;'1'
   121  00061A  32                 	db	50	;'2'
   122  00061B  33                 	db	51	;'3'
   123  00061C  34                 	db	52	;'4'
   124  00061D  35                 	db	53	;'5'
   125  00061E  36                 	db	54	;'6'
   126  00061F  37                 	db	55	;'7'
   127  000620  38                 	db	56	;'8'
   128  000621  39                 	db	57	;'9'
   129  000622  41                 	db	65	;'A'
   130  000623  42                 	db	66	;'B'
   131  000624  43                 	db	67	;'C'
   132  000625  44                 	db	68	;'D'
   133  000626  45                 	db	69	;'E'
   134  000627  46                 	db	70	;'F'
   135  000628  00                 	db	0
   136  000629                     STR_1:
   137  000629  30                 	db	48	;'0'
   138  00062A  78                 	db	120	;'x'
   139  00062B  25                 	db	37
   140  00062C  30                 	db	48	;'0'
   141  00062D  34                 	db	52	;'4'
   142  00062E  58                 	db	88	;'X'
   143  00062F  00                 	db	0
   144                           
   145                           ; #config settings
   146  000630  00                 	db	0	; dummy byte at the end
   147  0000                     
   148                           	psect	cinit
   149  000D64                     __pcinit:
   150                           	opt stack 0
   151  000D64                     start_initialization:
   152                           	opt stack 0
   153  000D64                     __initialization:
   154                           	opt stack 0
   155                           
   156                           ; Clear objects allocated to BANK2 (256 bytes)
   157  000D64  EE02  F000         	lfsr	0,__pbssBANK2
   158  000D68  EE11 F000          	lfsr	1,256
   159  000D6C                     clear_0:
   160  000D6C  6AEE               	clrf	postinc0,c
   161  000D6E  50E5               	movf	postdec1,w,c
   162  000D70  50E1               	movf	fsr1l,w,c
   163  000D72  E1FC               	bnz	clear_0
   164  000D74  50E2               	movf	fsr1h,w,c
   165  000D76  E1FA               	bnz	clear_0
   166                           
   167                           ; Clear objects allocated to BANK1 (64 bytes)
   168  000D78  EE01  F041         	lfsr	0,__pbssBANK1
   169  000D7C  0E40               	movlw	64
   170  000D7E                     clear_1:
   171  000D7E  6AEE               	clrf	postinc0,c
   172  000D80  06E8               	decf	wreg,f,c
   173  000D82  E1FD               	bnz	clear_1
   174                           
   175                           ; Clear objects allocated to COMRAM (64 bytes)
   176  000D84  EE00  F001         	lfsr	0,__pbssCOMRAM
   177  000D88  0E40               	movlw	64
   178  000D8A                     clear_2:
   179  000D8A  6AEE               	clrf	postinc0,c
   180  000D8C  06E8               	decf	wreg,f,c
   181  000D8E  E1FD               	bnz	clear_2
   182  000D90                     end_of_initialization:
   183                           	opt stack 0
   184  000D90                     __end_of__initialization:
   185                           	opt stack 0
   186  000D90  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   187  000D92  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   188  000D94  0E00               	movlw	low (__Lmediumconst shr (0+16))
   189  000D96  6EF8               	movwf	tblptru,c
   190  000D98  0100               	movlb	0
   191  000D9A  EF0B  F005         	goto	_main	;jump to C main() function
   192                           tblptru	equ	0xFF8
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1h	equ	0xFE2
   197                           fsr1l	equ	0xFE1
   198                           
   199                           	psect	bssCOMRAM
   200  000001                     __pbssCOMRAM:
   201                           	opt stack 0
   202  000001                     flash_block_write@F3209:
   203                           	opt stack 0
   204  000001                     	ds	64
   205                           tblptru	equ	0xFF8
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           postdec1	equ	0xFE5
   209                           fsr1h	equ	0xFE2
   210                           fsr1l	equ	0xFE1
   211                           
   212                           	psect	bssBANK1
   213  000141                     __pbssBANK1:
   214                           	opt stack 0
   215  000141                     main@F3214:
   216                           	opt stack 0
   217  000141                     	ds	64
   218                           tblptru	equ	0xFF8
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           postdec1	equ	0xFE5
   222                           fsr1h	equ	0xFE2
   223                           fsr1l	equ	0xFE1
   224                           
   225                           	psect	bssBANK2
   226  000200                     __pbssBANK2:
   227                           	opt stack 0
   228  000200                     _print_buffer:
   229                           	opt stack 0
   230  000200                     	ds	256
   231                           tblptru	equ	0xFF8
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           postdec1	equ	0xFE5
   235                           fsr1h	equ	0xFE2
   236                           fsr1l	equ	0xFE1
   237                           
   238                           	psect	cstackBANK1
   239  000100                     __pcstackBANK1:
   240                           	opt stack 0
   241  000100                     main@flash_data:
   242                           	opt stack 0
   243                           
   244                           ; 64 bytes @ 0x0
   245  000100                     	ds	64
   246  000140                     main@i:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x40
   250  000140                     	ds	1
   251                           tblptru	equ	0xFF8
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           postdec1	equ	0xFE5
   255                           fsr1h	equ	0xFE2
   256                           fsr1l	equ	0xFE1
   257                           
   258                           	psect	cstackBANK0
   259  000080                     __pcstackBANK0:
   260                           	opt stack 0
   261  000080                     ??_isdigit:
   262  000080                     ?_flash_read:
   263                           	opt stack 0
   264  000080                     ?___wmul:
   265                           	opt stack 0
   266  000080                     ?___lwdiv:
   267                           	opt stack 0
   268  000080                     uart_send@c:
   269                           	opt stack 0
   270  000080                     flash_read@flash_addr:
   271                           	opt stack 0
   272  000080                     flash_block_delete@addr:
   273                           	opt stack 0
   274  000080                     uart_init@gen_reg:
   275                           	opt stack 0
   276  000080                     ___wmul@multiplier:
   277                           	opt stack 0
   278  000080                     ___lwdiv@dividend:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x0
   282  000080                     	ds	1
   283  000081                     _isdigit$860:
   284                           	opt stack 0
   285  000081                     uart_send_array@c:
   286                           	opt stack 0
   287  000081                     uart_send_string@c:
   288                           	opt stack 0
   289                           
   290                           ; 2 bytes @ 0x1
   291  000081                     	ds	1
   292  000082                     ??_flash_read:
   293  000082                     isdigit@c:
   294                           	opt stack 0
   295  000082                     uart_init@sync:
   296                           	opt stack 0
   297  000082                     ___wmul@multiplicand:
   298                           	opt stack 0
   299  000082                     ___lwdiv@divisor:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x2
   303  000082                     	ds	1
   304  000083                     uart_send_string@i:
   305                           	opt stack 0
   306  000083                     uart_send_array@len:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x3
   310  000083                     	ds	1
   311  000084                     flash_read@flash_h:
   312                           	opt stack 0
   313  000084                     ___lwdiv@counter:
   314                           	opt stack 0
   315  000084                     uart_init@brgh:
   316                           	opt stack 0
   317  000084                     ___wmul@product:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x4
   321  000084                     	ds	1
   322  000085                     ??_uart_send_array:
   323  000085                     flash_read@flash_l:
   324                           	opt stack 0
   325  000085                     ___lwdiv@quotient:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x5
   329  000085                     	ds	1
   330  000086                     flash_block_write@addr:
   331                           	opt stack 0
   332  000086                     uart_init@brg16:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x6
   336  000086                     	ds	1
   337  000087                     ?_sprintf:
   338                           	opt stack 0
   339  000087                     uart_send_array@i:
   340                           	opt stack 0
   341  000087                     sprintf@sp:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x7
   345  000087                     	ds	1
   346  000088                     flash_block_write@flash_data_buff:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x8
   350  000088                     	ds	1
   351  000089                     sprintf@f:
   352                           	opt stack 0
   353                           
   354                           ; 2 bytes @ 0x9
   355  000089                     	ds	1
   356  00008A                     flash_block_write@flash_store_buff:
   357                           	opt stack 0
   358                           
   359                           ; 64 bytes @ 0xA
   360  00008A                     	ds	3
   361  00008D                     ??_sprintf:
   362                           
   363                           ; 1 bytes @ 0xD
   364  00008D                     	ds	4
   365  000091                     sprintf@idx:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x11
   369  000091                     	ds	1
   370  000092                     sprintf@ap:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x12
   374  000092                     	ds	2
   375  000094                     sprintf@flag:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x14
   379  000094                     	ds	1
   380  000095                     sprintf@val:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x15
   384  000095                     	ds	2
   385  000097                     sprintf@prec:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x17
   389  000097                     	ds	1
   390  000098                     sprintf@width:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x18
   394  000098                     	ds	2
   395  00009A                     sprintf@c:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x1A
   399  00009A                     	ds	48
   400  0000CA                     flash_block_write@flash_ptr:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x4A
   404  0000CA                     	ds	2
   405  0000CC                     flash_block_write@i:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x4C
   409  0000CC                     	ds	1
   410  0000CD                     ??_main:
   411                           
   412                           ; 1 bytes @ 0x4D
   413  0000CD                     	ds	2
   414                           tblptru	equ	0xFF8
   415                           postinc0	equ	0xFEE
   416                           wreg	equ	0xFE8
   417                           postdec1	equ	0xFE5
   418                           fsr1h	equ	0xFE2
   419                           fsr1l	equ	0xFE1
   420                           
   421                           	psect	cstackCOMRAM
   422  000041                     __pcstackCOMRAM:
   423                           	opt stack 0
   424  000041                     ??_high_isr:
   425  000041                     
   426                           ; 1 bytes @ 0x0
   427  000041                     	ds	14
   428  00004F                     ??_low_isr:
   429                           
   430                           ; 1 bytes @ 0xE
   431  00004F                     	ds	17
   432  000060                     tblptru	equ	0xFF8
   433                           postinc0	equ	0xFEE
   434                           wreg	equ	0xFE8
   435                           postdec1	equ	0xFE5
   436                           fsr1h	equ	0xFE2
   437                           fsr1l	equ	0xFE1
   438                           
   439                           ; 1 bytes @ 0x1F
   440 ;;
   441 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   442 ;;
   443 ;; *************** function _main *****************
   444 ;; Defined at:
   445 ;;		line 117 in file "main.c"
   446 ;; Parameters:    Size  Location     Type
   447 ;;		None
   448 ;; Auto vars:     Size  Location     Type
   449 ;;  i               1   64[BANK1 ] unsigned char 
   450 ;;  flash_data     64    0[BANK1 ] unsigned char [64]
   451 ;; Return value:  Size  Location     Type
   452 ;;                  1    wreg      void 
   453 ;; Registers used:
   454 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   455 ;; Tracked objects:
   456 ;;		On entry : 0/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   460 ;;      Params:         0       0       0       0       0       0       0
   461 ;;      Locals:         0       0      65       0       0       0       0
   462 ;;      Temps:          0       2       0       0       0       0       0
   463 ;;      Totals:         0       2      65       0       0       0       0
   464 ;;Total ram usage:       67 bytes
   465 ;; Hardware stack levels required when called:    4
   466 ;; This function calls:
   467 ;;		_flash_block_write
   468 ;;		_flash_read
   469 ;;		_sprintf
   470 ;;		_uart_init
   471 ;;		_uart_send_array
   472 ;;		_uart_send_string
   473 ;; This function is called by:
   474 ;;		Startup code after reset
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478                           	psect	text0
   479  000A16                     __ptext0:
   480                           	opt stack 0
   481  000A16                     _main:
   482                           	opt stack 27
   483                           
   484                           ;main.c: 119: uint8_t flash_data[64] = {0};
   485                           
   486                           ;incstack = 0
   487  000A16  EE21  F041         	lfsr	2,main@F3214
   488  000A1A  EE11  F000         	lfsr	1,main@flash_data
   489  000A1E  0E3F               	movlw	63
   490  000A20                     u1071:
   491  000A20  CFDB FFE3          	movff	plusw2,plusw1
   492  000A24  06E8               	decf	wreg,f,c
   493  000A26  E2FC               	bc	u1071
   494                           
   495                           ;main.c: 121: OSCCONbits.IDLEN = 1;
   496  000A28  8ED3               	bsf	4051,7,c	;volatile
   497                           
   498                           ;main.c: 122: OSCCONbits.IRCF = 0x07;
   499  000A2A  88D3               	bsf	4051,4,c	;volatile
   500  000A2C  8AD3               	bsf	4051,5,c	;volatile
   501  000A2E  8CD3               	bsf	4051,6,c	;volatile
   502                           
   503                           ;main.c: 123: OSCCONbits.SCS = 0x03;
   504  000A30  0E03               	movlw	3
   505  000A32  12D3               	iorwf	4051,f,c	;volatile
   506  000A34                     l57:
   507  000A34  A4D3               	btfss	4051,2,c	;volatile
   508  000A36  D7FE               	goto	l57
   509                           
   510                           ;main.c: 126: for(uint8_t i = 0; i<64 ;i++){
   511  000A38  0E00               	movlw	0
   512  000A3A  0101               	movlb	1	; () banked
   513  000A3C  6F40               	movwf	main@i& (0+255),b
   514  000A3E                     l1714:
   515                           
   516                           ; BSR set to: 1
   517  000A3E  0E3F               	movlw	63
   518  000A40  0101               	movlb	1	; () banked
   519  000A42  6540               	cpfsgt	main@i& (0+255),b
   520  000A44  D001               	goto	l1718
   521  000A46  D00E               	goto	l1724
   522  000A48                     l1718:
   523                           
   524                           ; BSR set to: 1
   525                           ;main.c: 127: flash_data[i] = i;
   526  000A48  0101               	movlb	1	; () banked
   527  000A4A  5140               	movf	main@i& (0+255),w,b
   528  000A4C  0D01               	mullw	1
   529  000A4E  0E00               	movlw	low main@flash_data
   530  000A50  24F3               	addwf	prodl,w,c
   531  000A52  6ED9               	movwf	fsr2l,c
   532  000A54  0E01               	movlw	high main@flash_data
   533  000A56  20F4               	addwfc	prodh,w,c
   534  000A58  6EDA               	movwf	fsr2h,c
   535  000A5A  C140  FFDF         	movff	main@i,indf2
   536                           
   537                           ; BSR set to: 1
   538  000A5E  0101               	movlb	1	; () banked
   539  000A60  2B40               	incf	main@i& (0+255),f,b
   540  000A62  D7ED               	goto	l1714
   541  000A64                     l1724:
   542                           
   543                           ; BSR set to: 1
   544                           ;main.c: 128: }
   545                           ;main.c: 130: TRISB=0;
   546  000A64  0E00               	movlw	0
   547  000A66  6E93               	movwf	3987,c	;volatile
   548                           
   549                           ;main.c: 131: LATB=0x00;
   550  000A68  0E00               	movlw	0
   551  000A6A  6E8A               	movwf	3978,c	;volatile
   552                           
   553                           ; BSR set to: 1
   554                           ;main.c: 134: uart_init(51,0,1,0);
   555  000A6C  0E00               	movlw	0
   556  000A6E  0100               	movlb	0	; () banked
   557  000A70  6F81               	movwf	(uart_init@gen_reg+1)& (0+255),b
   558  000A72  0E33               	movlw	51
   559  000A74  6F80               	movwf	uart_init@gen_reg& (0+255),b
   560  000A76  0E00               	movlw	0
   561  000A78  0100               	movlb	0	; () banked
   562  000A7A  6F83               	movwf	(uart_init@sync+1)& (0+255),b
   563  000A7C  0E00               	movlw	0
   564  000A7E  6F82               	movwf	uart_init@sync& (0+255),b
   565  000A80  0E00               	movlw	0
   566  000A82  0100               	movlb	0	; () banked
   567  000A84  6F85               	movwf	(uart_init@brgh+1)& (0+255),b
   568  000A86  0E01               	movlw	1
   569  000A88  6F84               	movwf	uart_init@brgh& (0+255),b
   570  000A8A  0E00               	movlw	0
   571  000A8C  0100               	movlb	0	; () banked
   572  000A8E  6F87               	movwf	(uart_init@brg16+1)& (0+255),b
   573  000A90  0E00               	movlw	0
   574  000A92  6F86               	movwf	uart_init@brg16& (0+255),b
   575  000A94  EC93  F006         	call	_uart_init	;wreg free
   576                           
   577                           ;main.c: 136: _delay((unsigned long)((2000)*(8000000/4000.0)));
   578  000A98  0E15               	movlw	21
   579  000A9A  0100               	movlb	0	; () banked
   580  000A9C  6FCE               	movwf	(??_main+1)& (0+255),b
   581  000A9E  0E4B               	movlw	75
   582  000AA0  0100               	movlb	0	; () banked
   583  000AA2  6FCD               	movwf	??_main& (0+255),b
   584  000AA4  0EBE               	movlw	190
   585  000AA6                     u1117:
   586  000AA6  2EE8               	decfsz	wreg,f,c
   587  000AA8  D7FE               	bra	u1117
   588  000AAA  2FCD               	decfsz	??_main& (0+255),f,b
   589  000AAC  D7FC               	bra	u1117
   590  000AAE  2FCE               	decfsz	(??_main+1)& (0+255),f,b
   591  000AB0  D7FA               	bra	u1117
   592  000AB2  F000               	nop	
   593                           
   594                           ;main.c: 137: uart_send_array(program_start,15);
   595  000AB4  0E09               	movlw	low _program_start
   596  000AB6  0100               	movlb	0	; () banked
   597  000AB8  6F81               	movwf	uart_send_array@c& (0+255),b
   598  000ABA  0E06               	movlw	high _program_start
   599  000ABC  0100               	movlb	0	; () banked
   600  000ABE  6F82               	movwf	(uart_send_array@c+1)& (0+255),b
   601  000AC0  0E00               	movlw	0
   602  000AC2  0100               	movlb	0	; () banked
   603  000AC4  6F84               	movwf	(uart_send_array@len+1)& (0+255),b
   604  000AC6  0E0F               	movlw	15
   605  000AC8  6F83               	movwf	uart_send_array@len& (0+255),b
   606  000ACA  EC45  F006         	call	_uart_send_array	;wreg free
   607                           
   608                           ;main.c: 139: RCONbits.IPEN = 1;
   609  000ACE  8ED0               	bsf	4048,7,c	;volatile
   610                           
   611                           ;main.c: 140: INTCONbits.GIEH = 1;
   612  000AD0  8EF2               	bsf	intcon,7,c	;volatile
   613                           
   614                           ;main.c: 141: INTCONbits.GIEL = 1;
   615  000AD2  8CF2               	bsf	intcon,6,c	;volatile
   616                           
   617                           ;main.c: 143: flash_block_write(0x7FC0,flash_data);
   618  000AD4  0E7F               	movlw	127
   619  000AD6  0100               	movlb	0	; () banked
   620  000AD8  6F87               	movwf	(flash_block_write@addr+1)& (0+255),b
   621  000ADA  0EC0               	movlw	192
   622  000ADC  6F86               	movwf	flash_block_write@addr& (0+255),b
   623  000ADE  0E00               	movlw	low main@flash_data
   624  000AE0  0100               	movlb	0	; () banked
   625  000AE2  6F88               	movwf	flash_block_write@flash_data_buff& (0+255),b
   626  000AE4  0E01               	movlw	high main@flash_data
   627  000AE6  0100               	movlb	0	; () banked
   628  000AE8  6F89               	movwf	(flash_block_write@flash_data_buff+1)& (0+255),b
   629  000AEA  EC6E  F004         	call	_flash_block_write	;wreg free
   630                           
   631                           ;main.c: 146: sprintf(print_buffer,"0x%04X",flash_read(0x7FE6));
   632  000AEE  0E00               	movlw	low _print_buffer
   633  000AF0  0100               	movlb	0	; () banked
   634  000AF2  6F87               	movwf	sprintf@sp& (0+255),b
   635  000AF4  0E02               	movlw	high _print_buffer
   636  000AF6  0100               	movlb	0	; () banked
   637  000AF8  6F88               	movwf	(sprintf@sp+1)& (0+255),b
   638  000AFA  0E29               	movlw	low STR_1
   639  000AFC  0100               	movlb	0	; () banked
   640  000AFE  6F89               	movwf	sprintf@f& (0+255),b
   641  000B00  0E06               	movlw	high STR_1
   642  000B02  0100               	movlb	0	; () banked
   643  000B04  6F8A               	movwf	(sprintf@f+1)& (0+255),b
   644  000B06  0E7F               	movlw	127
   645  000B08  0100               	movlb	0	; () banked
   646  000B0A  6F81               	movwf	(flash_read@flash_addr+1)& (0+255),b
   647  000B0C  0EE6               	movlw	230
   648  000B0E  6F80               	movwf	flash_read@flash_addr& (0+255),b
   649  000B10  EC12  F006         	call	_flash_read	;wreg free
   650  000B14  C080  F08B         	movff	?_flash_read,?_sprintf+4
   651  000B18  C081  F08C         	movff	?_flash_read+1,?_sprintf+5
   652  000B1C  EC19  F003         	call	_sprintf	;wreg free
   653                           
   654                           ;main.c: 147: uart_send_string(print_buffer);
   655  000B20  0E00               	movlw	low _print_buffer
   656  000B22  0100               	movlb	0	; () banked
   657  000B24  6F81               	movwf	uart_send_string@c& (0+255),b
   658  000B26  0E02               	movlw	high _print_buffer
   659  000B28  0100               	movlb	0	; () banked
   660  000B2A  6F82               	movwf	(uart_send_string@c+1)& (0+255),b
   661  000B2C  EC70  F006         	call	_uart_send_string	;wreg free
   662  000B30                     l62:
   663                           
   664                           ;main.c: 150: }
   665  000B30  D7FF               	goto	l62
   666  000B32                     __end_of_main:
   667                           	opt stack 0
   668                           tblptru	equ	0xFF8
   669                           prodh	equ	0xFF4
   670                           prodl	equ	0xFF3
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           plusw1	equ	0xFE3
   676                           fsr1h	equ	0xFE2
   677                           fsr1l	equ	0xFE1
   678                           indf2	equ	0xFDF
   679                           plusw2	equ	0xFDB
   680                           fsr2h	equ	0xFDA
   681                           fsr2l	equ	0xFD9
   682                           
   683 ;; *************** function _uart_send_string *****************
   684 ;; Defined at:
   685 ;;		line 50 in file "uart_layer.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;  c               2    1[BANK0 ] PTR unsigned char 
   688 ;;		 -> print_buffer(256), 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  i               1    3[BANK0 ] unsigned char 
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   700 ;;      Params:         0       2       0       0       0       0       0
   701 ;;      Locals:         0       1       0       0       0       0       0
   702 ;;      Temps:          0       0       0       0       0       0       0
   703 ;;      Totals:         0       3       0       0       0       0       0
   704 ;;Total ram usage:        3 bytes
   705 ;; Hardware stack levels used:    1
   706 ;; Hardware stack levels required when called:    3
   707 ;; This function calls:
   708 ;;		_uart_send
   709 ;; This function is called by:
   710 ;;		_main
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text1
   715  000CE0                     __ptext1:
   716                           	opt stack 0
   717  000CE0                     _uart_send_string:
   718                           	opt stack 27
   719                           
   720                           ;uart_layer.c: 51: uint8_t i=0;
   721                           
   722                           ;incstack = 0
   723  000CE0  0E00               	movlw	0
   724  000CE2  0100               	movlb	0	; () banked
   725  000CE4  6F83               	movwf	uart_send_string@i& (0+255),b
   726                           
   727                           ;uart_layer.c: 52: for(;c[i] != '\0';){
   728  000CE6  D010               	goto	l1702
   729  000CE8                     l1698:
   730                           
   731                           ; BSR set to: 0
   732                           ;uart_layer.c: 53: uart_send(c[i]);
   733  000CE8  0100               	movlb	0	; () banked
   734  000CEA  5183               	movf	uart_send_string@i& (0+255),w,b
   735  000CEC  0D01               	mullw	1
   736  000CEE  50F3               	movf	prodl,w,c
   737  000CF0  0100               	movlb	0	; () banked
   738  000CF2  2581               	addwf	uart_send_string@c& (0+255),w,b
   739  000CF4  6ED9               	movwf	fsr2l,c
   740  000CF6  50F4               	movf	prodh,w,c
   741  000CF8  0100               	movlb	0	; () banked
   742  000CFA  2182               	addwfc	(uart_send_string@c+1)& (0+255),w,b
   743  000CFC  6EDA               	movwf	fsr2h,c
   744  000CFE  50DF               	movf	indf2,w,c
   745  000D00  EC1E  F007         	call	_uart_send
   746                           
   747                           ;uart_layer.c: 54: i++;
   748  000D04  0100               	movlb	0	; () banked
   749  000D06  2B83               	incf	uart_send_string@i& (0+255),f,b
   750  000D08                     l1702:
   751                           
   752                           ; BSR set to: 0
   753  000D08  0100               	movlb	0	; () banked
   754  000D0A  5183               	movf	uart_send_string@i& (0+255),w,b
   755  000D0C  0D01               	mullw	1
   756  000D0E  50F3               	movf	prodl,w,c
   757  000D10  0100               	movlb	0	; () banked
   758  000D12  2581               	addwf	uart_send_string@c& (0+255),w,b
   759  000D14  6ED9               	movwf	fsr2l,c
   760  000D16  50F4               	movf	prodh,w,c
   761  000D18  0100               	movlb	0	; () banked
   762  000D1A  2182               	addwfc	(uart_send_string@c+1)& (0+255),w,b
   763  000D1C  6EDA               	movwf	fsr2h,c
   764  000D1E  50DF               	movf	indf2,w,c
   765  000D20  B4D8               	btfsc	status,2,c
   766  000D22  0012               	return	
   767  000D24  D7E1               	goto	l1698
   768  000D26                     __end_of_uart_send_string:
   769                           	opt stack 0
   770                           tblptru	equ	0xFF8
   771                           prodh	equ	0xFF4
   772                           prodl	equ	0xFF3
   773                           intcon	equ	0xFF2
   774                           postinc0	equ	0xFEE
   775                           wreg	equ	0xFE8
   776                           postdec1	equ	0xFE5
   777                           plusw1	equ	0xFE3
   778                           fsr1h	equ	0xFE2
   779                           fsr1l	equ	0xFE1
   780                           indf2	equ	0xFDF
   781                           plusw2	equ	0xFDB
   782                           fsr2h	equ	0xFDA
   783                           fsr2l	equ	0xFD9
   784                           status	equ	0xFD8
   785                           
   786 ;; *************** function _uart_send_array *****************
   787 ;; Defined at:
   788 ;;		line 45 in file "uart_layer.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;  c               2    1[BANK0 ] PTR unsigned char 
   791 ;;		 -> program_start(15), 
   792 ;;  len             2    3[BANK0 ] unsigned int 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;  i               1    7[BANK0 ] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   804 ;;      Params:         0       4       0       0       0       0       0
   805 ;;      Locals:         0       1       0       0       0       0       0
   806 ;;      Temps:          0       2       0       0       0       0       0
   807 ;;      Totals:         0       7       0       0       0       0       0
   808 ;;Total ram usage:        7 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    3
   811 ;; This function calls:
   812 ;;		_uart_send
   813 ;; This function is called by:
   814 ;;		_main
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           	psect	text2
   819  000C8A                     __ptext2:
   820                           	opt stack 0
   821  000C8A                     _uart_send_array:
   822                           	opt stack 27
   823                           
   824                           ;uart_layer.c: 46: for(uint8_t i = 0; i < len;i++){
   825                           
   826                           ; BSR set to: 0
   827                           ;incstack = 0
   828  000C8A  0E00               	movlw	0
   829  000C8C  0100               	movlb	0	; () banked
   830  000C8E  6F87               	movwf	uart_send_array@i& (0+255),b
   831  000C90  D017               	goto	l1604
   832  000C92                     l1600:
   833                           
   834                           ; BSR set to: 0
   835                           ;uart_layer.c: 47: uart_send(c[i]);
   836  000C92  0100               	movlb	0	; () banked
   837  000C94  5187               	movf	uart_send_array@i& (0+255),w,b
   838  000C96  0D01               	mullw	1
   839  000C98  C081  F085         	movff	uart_send_array@c,??_uart_send_array
   840  000C9C  C082  F086         	movff	uart_send_array@c+1,??_uart_send_array+1
   841  000CA0  50F3               	movf	prodl,w,c
   842  000CA2  0100               	movlb	0	; () banked
   843  000CA4  2785               	addwf	??_uart_send_array& (0+255),f,b
   844  000CA6  50F4               	movf	prodh,w,c
   845  000CA8  0100               	movlb	0	; () banked
   846  000CAA  2386               	addwfc	(??_uart_send_array+1)& (0+255),f,b
   847  000CAC  C085  FFF6         	movff	??_uart_send_array,tblptrl
   848  000CB0  C086  FFF7         	movff	??_uart_send_array+1,tblptrh
   849  000CB4                     	if	0	;tblptru may be non-zero
   850  000CB4                     	endif
   851  000CB4                     	if	0	;tblptru may be non-zero
   852  000CB4                     	endif
   853  000CB4  0008               	tblrd		*
   854  000CB6  50F5               	movf	tablat,w,c
   855  000CB8  EC1E  F007         	call	_uart_send
   856  000CBC  0100               	movlb	0	; () banked
   857  000CBE  2B87               	incf	uart_send_array@i& (0+255),f,b
   858  000CC0                     l1604:
   859                           
   860                           ; BSR set to: 0
   861  000CC0  0100               	movlb	0	; () banked
   862  000CC2  5187               	movf	uart_send_array@i& (0+255),w,b
   863  000CC4  0100               	movlb	0	; () banked
   864  000CC6  6F85               	movwf	??_uart_send_array& (0+255),b
   865  000CC8  6B86               	clrf	(??_uart_send_array+1)& (0+255),b
   866  000CCA  0100               	movlb	0	; () banked
   867  000CCC  5183               	movf	uart_send_array@len& (0+255),w,b
   868  000CCE  0100               	movlb	0	; () banked
   869  000CD0  5D85               	subwf	??_uart_send_array& (0+255),w,b
   870  000CD2  0100               	movlb	0	; () banked
   871  000CD4  5184               	movf	(uart_send_array@len+1)& (0+255),w,b
   872  000CD6  0100               	movlb	0	; () banked
   873  000CD8  5986               	subwfb	(??_uart_send_array+1)& (0+255),w,b
   874  000CDA  B0D8               	btfsc	status,0,c
   875  000CDC  0012               	return	
   876  000CDE  D7D9               	goto	l1600
   877  000CE0                     __end_of_uart_send_array:
   878                           	opt stack 0
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           prodh	equ	0xFF4
   884                           prodl	equ	0xFF3
   885                           intcon	equ	0xFF2
   886                           postinc0	equ	0xFEE
   887                           wreg	equ	0xFE8
   888                           postdec1	equ	0xFE5
   889                           plusw1	equ	0xFE3
   890                           fsr1h	equ	0xFE2
   891                           fsr1l	equ	0xFE1
   892                           indf2	equ	0xFDF
   893                           plusw2	equ	0xFDB
   894                           fsr2h	equ	0xFDA
   895                           fsr2l	equ	0xFD9
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _uart_send *****************
   899 ;; Defined at:
   900 ;;		line 24 in file "uart_layer.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  c               1    wreg     unsigned char 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  c               1    0[BANK0 ] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   914 ;;      Params:         0       0       0       0       0       0       0
   915 ;;      Locals:         0       1       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0
   917 ;;      Totals:         0       1       0       0       0       0       0
   918 ;;Total ram usage:        1 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    2
   921 ;; This function calls:
   922 ;;		Nothing
   923 ;; This function is called by:
   924 ;;		_uart_send_array
   925 ;;		_uart_send_string
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text3
   930  000E3C                     __ptext3:
   931                           	opt stack 0
   932  000E3C                     _uart_send:
   933                           	opt stack 27
   934                           
   935                           ; BSR set to: 0
   936                           ;incstack = 0
   937                           ;uart_send@c stored from wreg
   938  000E3C  0100               	movlb	0	; () banked
   939  000E3E  6F80               	movwf	uart_send@c& (0+255),b
   940                           
   941                           ;uart_layer.c: 25: TXREG=c;
   942  000E40  C080  FFAD         	movff	uart_send@c,4013	;volatile
   943                           
   944                           ;uart_layer.c: 26: for(;TXSTAbits.TRMT==0;){
   945  000E44  D001               	goto	l100
   946  000E46                     l101:
   947                           
   948                           ;uart_layer.c: 27: __nop();
   949  000E46  F000               	nop	
   950  000E48                     l100:
   951  000E48  B2AC               	btfsc	4012,1,c	;volatile
   952  000E4A  0012               	return	
   953  000E4C  D7FC               	goto	l101
   954  000E4E                     __end_of_uart_send:
   955                           	opt stack 0
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           prodh	equ	0xFF4
   961                           prodl	equ	0xFF3
   962                           intcon	equ	0xFF2
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postdec1	equ	0xFE5
   966                           plusw1	equ	0xFE3
   967                           fsr1h	equ	0xFE2
   968                           fsr1l	equ	0xFE1
   969                           indf2	equ	0xFDF
   970                           plusw2	equ	0xFDB
   971                           fsr2h	equ	0xFDA
   972                           fsr2l	equ	0xFD9
   973                           status	equ	0xFD8
   974                           
   975 ;; *************** function _uart_init *****************
   976 ;; Defined at:
   977 ;;		line 4 in file "uart_layer.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;  gen_reg         2    0[BANK0 ] unsigned int 
   980 ;;  sync            2    2[BANK0 ] unsigned int 
   981 ;;  brgh            2    4[BANK0 ] unsigned int 
   982 ;;  brg16           2    6[BANK0 ] unsigned int 
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, status,2
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   994 ;;      Params:         0       8       0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0
   997 ;;      Totals:         0       8       0       0       0       0       0
   998 ;;Total ram usage:        8 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    2
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           	psect	text4
  1009  000D26                     __ptext4:
  1010                           	opt stack 0
  1011  000D26                     _uart_init:
  1012                           	opt stack 28
  1013                           
  1014                           ;uart_layer.c: 6: TRISCbits.RC7=1;
  1015                           
  1016                           ;incstack = 0
  1017  000D26  8E94               	bsf	3988,7,c	;volatile
  1018                           
  1019                           ;uart_layer.c: 7: TRISCbits.RC6=1;
  1020  000D28  8C94               	bsf	3988,6,c	;volatile
  1021                           
  1022                           ;uart_layer.c: 9: SPBRGH = (gen_reg & 0xFF00) >> 8;
  1023  000D2A  0100               	movlb	0	; () banked
  1024  000D2C  5181               	movf	(uart_init@gen_reg+1)& (0+255),w,b
  1025  000D2E  6EB0               	movwf	4016,c	;volatile
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;uart_layer.c: 10: SPBRG = gen_reg & 0x00FF;
  1029  000D30  C080  FFAF         	movff	uart_init@gen_reg,4015	;volatile
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;uart_layer.c: 12: RCSTAbits.CREN = 1;
  1033  000D34  88AB               	bsf	4011,4,c	;volatile
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;uart_layer.c: 13: RCSTAbits.SPEN = 1;
  1037  000D36  8EAB               	bsf	4011,7,c	;volatile
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;uart_layer.c: 14: BAUDCONbits.BRG16 = brg16;
  1041  000D38  0100               	movlb	0	; () banked
  1042  000D3A  B186               	btfsc	uart_init@brg16& (0+255),0,b
  1043  000D3C  D002               	bra	u885
  1044  000D3E  96B8               	bcf	4024,3,c	;volatile
  1045  000D40  D001               	bra	u886
  1046  000D42                     u885:
  1047  000D42  86B8               	bsf	4024,3,c	;volatile
  1048  000D44                     u886:
  1049                           
  1050                           ;uart_layer.c: 16: TXSTAbits.SYNC = sync;
  1051  000D44  0100               	movlb	0	; () banked
  1052  000D46  B182               	btfsc	uart_init@sync& (0+255),0,b
  1053  000D48  D002               	bra	u895
  1054  000D4A  98AC               	bcf	4012,4,c	;volatile
  1055  000D4C  D001               	bra	u896
  1056  000D4E                     u895:
  1057  000D4E  88AC               	bsf	4012,4,c	;volatile
  1058  000D50                     u896:
  1059                           
  1060                           ;uart_layer.c: 17: TXSTAbits.BRGH = brgh;
  1061  000D50  0100               	movlb	0	; () banked
  1062  000D52  B184               	btfsc	uart_init@brgh& (0+255),0,b
  1063  000D54  D002               	bra	u905
  1064  000D56  94AC               	bcf	4012,2,c	;volatile
  1065  000D58  D001               	bra	u906
  1066  000D5A                     u905:
  1067  000D5A  84AC               	bsf	4012,2,c	;volatile
  1068  000D5C                     u906:
  1069                           
  1070                           ;uart_layer.c: 18: TXSTAbits.TXEN = 1;
  1071  000D5C  8AAC               	bsf	4012,5,c	;volatile
  1072                           
  1073                           ;uart_layer.c: 20: IPR1bits.RCIP=1;
  1074  000D5E  8A9F               	bsf	3999,5,c	;volatile
  1075                           
  1076                           ;uart_layer.c: 21: PIE1bits.RCIE=1;
  1077  000D60  8A9D               	bsf	3997,5,c	;volatile
  1078  000D62  0012               	return		;funcret
  1079  000D64                     __end_of_uart_init:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           prodh	equ	0xFF4
  1086                           prodl	equ	0xFF3
  1087                           intcon	equ	0xFF2
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           plusw1	equ	0xFE3
  1092                           fsr1h	equ	0xFE2
  1093                           fsr1l	equ	0xFE1
  1094                           indf2	equ	0xFDF
  1095                           plusw2	equ	0xFDB
  1096                           fsr2h	equ	0xFDA
  1097                           fsr2l	equ	0xFD9
  1098                           status	equ	0xFD8
  1099                           
  1100 ;; *************** function _sprintf *****************
  1101 ;; Defined at:
  1102 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  1105 ;;		 -> print_buffer(256), 
  1106 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  1107 ;;		 -> STR_1(7), 
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  idx             1   17[BANK0 ] unsigned char 
  1110 ;;  tmpval          4    0        struct .
  1111 ;;  cp              3    0        PTR const unsigned char 
  1112 ;;  width           2   24[BANK0 ] int 
  1113 ;;  val             2   21[BANK0 ] unsigned int 
  1114 ;;  ap              2   18[BANK0 ] PTR void [1]
  1115 ;;		 -> ?_sprintf(2), 
  1116 ;;  len             2    0        unsigned int 
  1117 ;;  c               1   26[BANK0 ] char 
  1118 ;;  prec            1   23[BANK0 ] char 
  1119 ;;  flag            1   20[BANK0 ] unsigned char 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  2    7[BANK0 ] int 
  1122 ;; Registers used:
  1123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1129 ;;      Params:         0       6       0       0       0       0       0
  1130 ;;      Locals:         0      10       0       0       0       0       0
  1131 ;;      Temps:          0       4       0       0       0       0       0
  1132 ;;      Totals:         0      20       0       0       0       0       0
  1133 ;;Total ram usage:       20 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    3
  1136 ;; This function calls:
  1137 ;;		___lwdiv
  1138 ;;		___wmul
  1139 ;;		_isdigit
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           	psect	text5
  1146  000632                     __ptext5:
  1147                           	opt stack 0
  1148  000632                     _sprintf:
  1149                           	opt stack 27
  1150                           
  1151                           ;doprnt.c: 494: va_list ap;
  1152                           ;doprnt.c: 499: signed char c;
  1153                           ;doprnt.c: 501: int width;
  1154                           ;doprnt.c: 506: signed char prec;
  1155                           ;doprnt.c: 508: unsigned char flag;
  1156                           ;doprnt.c: 523: union {
  1157                           ;doprnt.c: 524: unsigned long vd;
  1158                           ;doprnt.c: 525: double integ;
  1159                           ;doprnt.c: 526: } tmpval;
  1160                           ;doprnt.c: 528: unsigned int val;
  1161                           ;doprnt.c: 529: unsigned len;
  1162                           ;doprnt.c: 530: const char * cp;
  1163                           ;doprnt.c: 533: *ap = __va_start();
  1164                           
  1165                           ;incstack = 0
  1166  000632  0E8B               	movlw	low (?_sprintf+4)
  1167  000634  0100               	movlb	0	; () banked
  1168  000636  6F92               	movwf	sprintf@ap& (0+255),b
  1169  000638  0E00               	movlw	high (?_sprintf+4)
  1170  00063A  0100               	movlb	0	; () banked
  1171  00063C  6F93               	movwf	(sprintf@ap+1)& (0+255),b
  1172                           
  1173                           ;doprnt.c: 536: while(c = *f++) {
  1174  00063E  D139               	goto	l1690
  1175  000640                     l1608:
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;doprnt.c: 538: if(c != '%')
  1179  000640  0E25               	movlw	37
  1180  000642  0100               	movlb	0	; () banked
  1181  000644  199A               	xorwf	sprintf@c& (0+255),w,b
  1182  000646  B4D8               	btfsc	status,2,c
  1183  000648  D00A               	goto	l1614
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;doprnt.c: 540: {
  1187                           ;doprnt.c: 541: ((*sp++ = (c)));
  1188  00064A  C087  FFD9         	movff	sprintf@sp,fsr2l
  1189  00064E  C088  FFDA         	movff	sprintf@sp+1,fsr2h
  1190  000652  C09A  FFDF         	movff	sprintf@c,indf2
  1191                           
  1192                           ; BSR set to: 0
  1193  000656  0100               	movlb	0	; () banked
  1194  000658  4B87               	infsnz	sprintf@sp& (0+255),f,b
  1195  00065A  2B88               	incf	(sprintf@sp+1)& (0+255),f,b
  1196                           
  1197                           ;doprnt.c: 542: continue;
  1198  00065C  D12A               	goto	l1690
  1199  00065E                     l1614:
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;doprnt.c: 543: }
  1203                           ;doprnt.c: 546: width = 0;
  1204  00065E  0E00               	movlw	0
  1205  000660  0100               	movlb	0	; () banked
  1206  000662  6F99               	movwf	(sprintf@width+1)& (0+255),b
  1207  000664  0E00               	movlw	0
  1208  000666  6F98               	movwf	sprintf@width& (0+255),b
  1209                           
  1210                           ;doprnt.c: 548: flag = 0;
  1211  000668  0E00               	movlw	0
  1212  00066A  0100               	movlb	0	; () banked
  1213  00066C  6F94               	movwf	sprintf@flag& (0+255),b
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;doprnt.c: 551: switch(*f) {
  1217                           
  1218                           ;doprnt.c: 550: for(;;) {
  1219  00066E  D005               	goto	l1620
  1220  000670                     l1616:
  1221                           
  1222                           ;doprnt.c: 580: flag |= 0x04;
  1223  000670  0100               	movlb	0	; () banked
  1224  000672  8594               	bsf	sprintf@flag& (0+255),2,b
  1225                           
  1226                           ;doprnt.c: 581: f++;
  1227  000674  0100               	movlb	0	; () banked
  1228  000676  4B89               	infsnz	sprintf@f& (0+255),f,b
  1229  000678  2B8A               	incf	(sprintf@f+1)& (0+255),f,b
  1230  00067A                     l1620:
  1231  00067A  C089  FFF6         	movff	sprintf@f,tblptrl
  1232  00067E  C08A  FFF7         	movff	sprintf@f+1,tblptrh
  1233  000682                     	if	0	;tblptru may be non-zero
  1234  000682                     	endif
  1235  000682                     	if	0	;tblptru may be non-zero
  1236  000682                     	endif
  1237  000682  0008               	tblrd		*
  1238  000684  50F5               	movf	tablat,w,c
  1239                           
  1240                           ; Switch size 1, requested type "space"
  1241                           ; Number of cases is 1, Range of values is 48 to 48
  1242                           ; switch strategies available:
  1243                           ; Name         Instructions Cycles
  1244                           ; simple_byte            4     3 (average)
  1245                           ;	Chosen strategy is simple_byte
  1246  000686  0A30               	xorlw	48	; case 48
  1247  000688  B4D8               	btfsc	status,2,c
  1248  00068A  D7F2               	goto	l1616
  1249                           
  1250                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1251                           
  1252                           ;doprnt.c: 586: }
  1253                           
  1254                           ;doprnt.c: 585: break;
  1255  00068C  C089  FFF6         	movff	sprintf@f,tblptrl
  1256  000690  C08A  FFF7         	movff	sprintf@f+1,tblptrh
  1257  000694                     	if	0	;tblptru may be non-zero
  1258  000694                     	endif
  1259  000694                     	if	0	;tblptru may be non-zero
  1260  000694                     	endif
  1261  000694  0008               	tblrd		*
  1262  000696  50F5               	movf	tablat,w,c
  1263  000698  ECEA  F006         	call	_isdigit
  1264  00069C  A0D8               	btfss	status,0,c
  1265  00069E  D040               	goto	l1636
  1266                           
  1267                           ;doprnt.c: 598: width = 0;
  1268  0006A0  0E00               	movlw	0
  1269  0006A2  0100               	movlb	0	; () banked
  1270  0006A4  6F99               	movwf	(sprintf@width+1)& (0+255),b
  1271  0006A6  0E00               	movlw	0
  1272  0006A8  6F98               	movwf	sprintf@width& (0+255),b
  1273  0006AA                     l1626:
  1274                           
  1275                           ;doprnt.c: 600: width *= 10;
  1276  0006AA  C098  F080         	movff	sprintf@width,___wmul@multiplier
  1277  0006AE  C099  F081         	movff	sprintf@width+1,___wmul@multiplier+1
  1278  0006B2  0E00               	movlw	0
  1279  0006B4  0100               	movlb	0	; () banked
  1280  0006B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1281  0006B8  0E0A               	movlw	10
  1282  0006BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1283  0006BC  ECCF  F006         	call	___wmul	;wreg free
  1284  0006C0  C080  F098         	movff	?___wmul,sprintf@width
  1285  0006C4  C081  F099         	movff	?___wmul+1,sprintf@width+1
  1286                           
  1287                           ;doprnt.c: 601: width += *f++ - '0';
  1288  0006C8  0ED0               	movlw	208
  1289  0006CA  0100               	movlb	0	; () banked
  1290  0006CC  6F8D               	movwf	??_sprintf& (0+255),b
  1291  0006CE  0EFF               	movlw	255
  1292  0006D0  0100               	movlb	0	; () banked
  1293  0006D2  6F8E               	movwf	(??_sprintf+1)& (0+255),b
  1294  0006D4  C089  FFF6         	movff	sprintf@f,tblptrl
  1295  0006D8  C08A  FFF7         	movff	sprintf@f+1,tblptrh
  1296  0006DC                     	if	0	;tblptru may be non-zero
  1297  0006DC                     	endif
  1298  0006DC                     	if	0	;tblptru may be non-zero
  1299  0006DC                     	endif
  1300  0006DC  0008               	tblrd		*
  1301  0006DE  50F5               	movf	tablat,w,c
  1302  0006E0  0100               	movlb	0	; () banked
  1303  0006E2  6F8F               	movwf	(??_sprintf+2)& (0+255),b
  1304  0006E4  6B90               	clrf	(??_sprintf+3)& (0+255),b
  1305  0006E6  0100               	movlb	0	; () banked
  1306  0006E8  518D               	movf	??_sprintf& (0+255),w,b
  1307  0006EA  0100               	movlb	0	; () banked
  1308  0006EC  278F               	addwf	(??_sprintf+2)& (0+255),f,b
  1309  0006EE  0100               	movlb	0	; () banked
  1310  0006F0  518E               	movf	(??_sprintf+1)& (0+255),w,b
  1311  0006F2  0100               	movlb	0	; () banked
  1312  0006F4  2390               	addwfc	(??_sprintf+3)& (0+255),f,b
  1313  0006F6  0100               	movlb	0	; () banked
  1314  0006F8  518F               	movf	(??_sprintf+2)& (0+255),w,b
  1315  0006FA  0100               	movlb	0	; () banked
  1316  0006FC  2798               	addwf	sprintf@width& (0+255),f,b
  1317  0006FE  0100               	movlb	0	; () banked
  1318  000700  5190               	movf	(??_sprintf+3)& (0+255),w,b
  1319  000702  0100               	movlb	0	; () banked
  1320  000704  2399               	addwfc	(sprintf@width+1)& (0+255),f,b
  1321                           
  1322                           ; BSR set to: 0
  1323  000706  0100               	movlb	0	; () banked
  1324  000708  4B89               	infsnz	sprintf@f& (0+255),f,b
  1325  00070A  2B8A               	incf	(sprintf@f+1)& (0+255),f,b
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1329  00070C  C089  FFF6         	movff	sprintf@f,tblptrl
  1330  000710  C08A  FFF7         	movff	sprintf@f+1,tblptrh
  1331  000714                     	if	0	;tblptru may be non-zero
  1332  000714                     	endif
  1333  000714                     	if	0	;tblptru may be non-zero
  1334  000714                     	endif
  1335  000714  0008               	tblrd		*
  1336  000716  50F5               	movf	tablat,w,c
  1337  000718  ECEA  F006         	call	_isdigit
  1338  00071C  B0D8               	btfsc	status,0,c
  1339  00071E  D7C5               	goto	l1626
  1340  000720                     l1636:
  1341  000720  C089  FFF6         	movff	sprintf@f,tblptrl
  1342  000724  C08A  FFF7         	movff	sprintf@f+1,tblptrh
  1343  000728  0100               	movlb	0	; () banked
  1344  00072A  4B89               	infsnz	sprintf@f& (0+255),f,b
  1345  00072C  2B8A               	incf	(sprintf@f+1)& (0+255),f,b
  1346  00072E                     	if	0	;tblptru may be non-zero
  1347  00072E                     	endif
  1348  00072E                     	if	0	;tblptru may be non-zero
  1349  00072E                     	endif
  1350  00072E  0008               	tblrd		*
  1351  000730  CFF5 F09A          	movff	tablat,sprintf@c
  1352  000734  0100               	movlb	0	; () banked
  1353  000736  519A               	movf	sprintf@c& (0+255),w,b
  1354                           
  1355                           ; Switch size 1, requested type "space"
  1356                           ; Number of cases is 3, Range of values is 0 to 120
  1357                           ; switch strategies available:
  1358                           ; Name         Instructions Cycles
  1359                           ; simple_byte           10     6 (average)
  1360                           ;	Chosen strategy is simple_byte
  1361  000738  0A00               	xorlw	0	; case 0
  1362  00073A  B4D8               	btfsc	status,2,c
  1363  00073C  D0C8               	goto	l1692
  1364  00073E  0A58               	xorlw	88	; case 88
  1365  000740  B4D8               	btfsc	status,2,c
  1366  000742  D003               	goto	l1638
  1367  000744  0A20               	xorlw	32	; case 120
  1368  000746  A4D8               	btfss	status,2,c
  1369  000748  D0B4               	goto	l1690
  1370  00074A                     l1638:
  1371                           
  1372                           ;doprnt.c: 1273: {
  1373                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1374  00074A  C092  FFD9         	movff	sprintf@ap,fsr2l
  1375  00074E  C093  FFDA         	movff	sprintf@ap+1,fsr2h
  1376  000752  CFDE F095          	movff	postinc2,sprintf@val
  1377  000756  CFDD F096          	movff	postdec2,sprintf@val+1
  1378  00075A  0E02               	movlw	2
  1379  00075C  0100               	movlb	0	; () banked
  1380  00075E  2792               	addwf	sprintf@ap& (0+255),f,b
  1381  000760  0E00               	movlw	0
  1382  000762  2393               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;doprnt.c: 1287: }
  1386                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1387  000764  0E01               	movlw	1
  1388  000766  0100               	movlb	0	; () banked
  1389  000768  6F9A               	movwf	sprintf@c& (0+255),b
  1390  00076A                     l1644:
  1391                           
  1392                           ; BSR set to: 0
  1393  00076A  0E04               	movlw	4
  1394  00076C  0100               	movlb	0	; () banked
  1395  00076E  199A               	xorwf	sprintf@c& (0+255),w,b
  1396  000770  B4D8               	btfsc	status,2,c
  1397  000772  D016               	goto	l1656
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1401                           
  1402                           ; BSR set to: 0
  1403                           
  1404                           ; BSR set to: 0
  1405  000774  0100               	movlb	0	; () banked
  1406  000776  519A               	movf	sprintf@c& (0+255),w,b
  1407  000778  0D02               	mullw	2
  1408  00077A  0E01               	movlw	low _hexpowers
  1409  00077C  24F3               	addwf	prodl,w,c
  1410  00077E  6EF6               	movwf	tblptrl,c
  1411  000780  0E06               	movlw	high _hexpowers
  1412  000782  20F4               	addwfc	prodh,w,c
  1413  000784  6EF7               	movwf	tblptrh,c
  1414  000786                     	if	0	;There are less than 3 active tblptr bytes
  1415  000786                     	endif
  1416  000786  0009               	tblrd		*+
  1417  000788  50F5               	movf	tablat,w,c
  1418  00078A  0100               	movlb	0	; () banked
  1419  00078C  5D95               	subwf	sprintf@val& (0+255),w,b
  1420  00078E  0009               	tblrd		*+
  1421  000790  50F5               	movf	tablat,w,c
  1422  000792  0100               	movlb	0	; () banked
  1423  000794  5996               	subwfb	(sprintf@val+1)& (0+255),w,b
  1424  000796  A0D8               	btfss	status,0,c
  1425  000798  D003               	goto	l1656
  1426                           
  1427                           ; BSR set to: 0
  1428                           
  1429                           ; BSR set to: 0
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;doprnt.c: 1318: break;
  1433  00079A  0100               	movlb	0	; () banked
  1434  00079C  2B9A               	incf	sprintf@c& (0+255),f,b
  1435  00079E  D7E5               	goto	l1644
  1436  0007A0                     l1656:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;doprnt.c: 1381: if(width > c)
  1440  0007A0  0E80               	movlw	128
  1441  0007A2  0100               	movlb	0	; () banked
  1442  0007A4  BF9A               	btfsc	sprintf@c& (0+255),7,b
  1443  0007A6  0E7F               	movlw	127
  1444  0007A8  0100               	movlb	0	; () banked
  1445  0007AA  6F8D               	movwf	??_sprintf& (0+255),b
  1446  0007AC  0100               	movlb	0	; () banked
  1447  0007AE  5198               	movf	sprintf@width& (0+255),w,b
  1448  0007B0  0100               	movlb	0	; () banked
  1449  0007B2  5D9A               	subwf	sprintf@c& (0+255),w,b
  1450  0007B4  0100               	movlb	0	; () banked
  1451  0007B6  5199               	movf	(sprintf@width+1)& (0+255),w,b
  1452  0007B8  0A80               	xorlw	128
  1453  0007BA  0100               	movlb	0	; () banked
  1454  0007BC  598D               	subwfb	??_sprintf& (0+255),w,b
  1455  0007BE  B0D8               	btfsc	status,0,c
  1456  0007C0  D00B               	goto	l1660
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;doprnt.c: 1382: width -= c;
  1460  0007C2  0100               	movlb	0	; () banked
  1461  0007C4  519A               	movf	sprintf@c& (0+255),w,b
  1462  0007C6  0100               	movlb	0	; () banked
  1463  0007C8  5F98               	subwf	sprintf@width& (0+255),f,b
  1464  0007CA  0E00               	movlw	0
  1465  0007CC  0100               	movlb	0	; () banked
  1466  0007CE  BF9A               	btfsc	sprintf@c& (0+255),7,b
  1467  0007D0  0EFF               	movlw	255
  1468  0007D2  0100               	movlb	0	; () banked
  1469  0007D4  5B99               	subwfb	(sprintf@width+1)& (0+255),f,b
  1470  0007D6  D005               	goto	l1662
  1471  0007D8                     l1660:
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;doprnt.c: 1383: else
  1475                           ;doprnt.c: 1384: width = 0;
  1476  0007D8  0E00               	movlw	0
  1477  0007DA  0100               	movlb	0	; () banked
  1478  0007DC  6F99               	movwf	(sprintf@width+1)& (0+255),b
  1479  0007DE  0E00               	movlw	0
  1480  0007E0  6F98               	movwf	sprintf@width& (0+255),b
  1481  0007E2                     l1662:
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;doprnt.c: 1387: if(flag & 0x04) {
  1485  0007E2  0100               	movlb	0	; () banked
  1486  0007E4  A594               	btfss	sprintf@flag& (0+255),2,b
  1487  0007E6  D014               	goto	l1672
  1488  0007E8                     
  1489                           ; BSR set to: 0
  1490                           ;doprnt.c: 1415: if(width)
  1491  0007E8  0100               	movlb	0	; () banked
  1492  0007EA  5198               	movf	sprintf@width& (0+255),w,b
  1493  0007EC  0100               	movlb	0	; () banked
  1494  0007EE  1199               	iorwf	(sprintf@width+1)& (0+255),w,b
  1495  0007F0  B4D8               	btfsc	status,2,c
  1496  0007F2  D027               	goto	l161
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1500                           
  1501                           ; BSR set to: 0
  1502                           
  1503                           ;doprnt.c: 1416: do
  1504  0007F4  C087  FFD9         	movff	sprintf@sp,fsr2l
  1505  0007F8  C088  FFDA         	movff	sprintf@sp+1,fsr2h
  1506  0007FC  0E30               	movlw	48
  1507  0007FE  6EDF               	movwf	indf2,c
  1508                           
  1509                           ; BSR set to: 0
  1510  000800  0100               	movlb	0	; () banked
  1511  000802  4B87               	infsnz	sprintf@sp& (0+255),f,b
  1512  000804  2B88               	incf	(sprintf@sp+1)& (0+255),f,b
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;doprnt.c: 1418: while(--width);
  1516  000806  0100               	movlb	0	; () banked
  1517  000808  0798               	decf	sprintf@width& (0+255),f,b
  1518  00080A  A0D8               	btfss	status,0,c
  1519  00080C  0799               	decf	(sprintf@width+1)& (0+255),f,b
  1520  00080E  D7EC               	goto	L1
  1521  000810                     l1672:
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;doprnt.c: 1422: {
  1525                           ;doprnt.c: 1424: if(width
  1526                           ;doprnt.c: 1428: )
  1527  000810  0100               	movlb	0	; () banked
  1528  000812  5198               	movf	sprintf@width& (0+255),w,b
  1529  000814  0100               	movlb	0	; () banked
  1530  000816  1199               	iorwf	(sprintf@width+1)& (0+255),w,b
  1531  000818  B4D8               	btfsc	status,2,c
  1532  00081A  D013               	goto	l161
  1533  00081C                     l1674:
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1537  00081C  C087  FFD9         	movff	sprintf@sp,fsr2l
  1538  000820  C088  FFDA         	movff	sprintf@sp+1,fsr2h
  1539  000824  0E20               	movlw	32
  1540  000826  6EDF               	movwf	indf2,c
  1541                           
  1542                           ; BSR set to: 0
  1543  000828  0100               	movlb	0	; () banked
  1544  00082A  4B87               	infsnz	sprintf@sp& (0+255),f,b
  1545  00082C  2B88               	incf	(sprintf@sp+1)& (0+255),f,b
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;doprnt.c: 1431: while(--width);
  1549  00082E  0100               	movlb	0	; () banked
  1550  000830  0798               	decf	sprintf@width& (0+255),f,b
  1551  000832  A0D8               	btfss	status,0,c
  1552  000834  0799               	decf	(sprintf@width+1)& (0+255),f,b
  1553  000836  0100               	movlb	0	; () banked
  1554  000838  5198               	movf	sprintf@width& (0+255),w,b
  1555  00083A  0100               	movlb	0	; () banked
  1556  00083C  1199               	iorwf	(sprintf@width+1)& (0+255),w,b
  1557  00083E  A4D8               	btfss	status,2,c
  1558  000840  D7ED               	goto	l1674
  1559  000842                     l161:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;doprnt.c: 1469: }
  1563                           ;doprnt.c: 1472: prec = c;
  1564  000842  C09A  F097         	movff	sprintf@c,sprintf@prec
  1565                           
  1566                           ;doprnt.c: 1474: while(prec--) {
  1567  000846  D02F               	goto	l1688
  1568  000848                     l1680:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;doprnt.c: 1478: {
  1572                           ;doprnt.c: 1499: {
  1573                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1574  000848  C095  F080         	movff	sprintf@val,___lwdiv@dividend
  1575  00084C  C096  F081         	movff	sprintf@val+1,___lwdiv@dividend+1
  1576  000850  0100               	movlb	0	; () banked
  1577  000852  5197               	movf	sprintf@prec& (0+255),w,b
  1578  000854  0D02               	mullw	2
  1579  000856  0E01               	movlw	low _hexpowers
  1580  000858  24F3               	addwf	prodl,w,c
  1581  00085A  6EF6               	movwf	tblptrl,c
  1582  00085C  0E06               	movlw	high _hexpowers
  1583  00085E  20F4               	addwfc	prodh,w,c
  1584  000860  6EF7               	movwf	tblptrh,c
  1585  000862                     	if	0	;There are less than 3 active tblptr bytes
  1586  000862                     	endif
  1587  000862  0009               	tblrd		*+
  1588  000864  CFF5 F082          	movff	tablat,___lwdiv@divisor
  1589  000868  000A               	tblrd		*-
  1590  00086A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  1591  00086E  ECD6  F005         	call	___lwdiv	;wreg free
  1592  000872  0100               	movlb	0	; () banked
  1593  000874  5180               	movf	?___lwdiv& (0+255),w,b
  1594  000876  0B0F               	andlw	15
  1595  000878  0100               	movlb	0	; () banked
  1596  00087A  6F91               	movwf	sprintf@idx& (0+255),b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  1600  00087C  0100               	movlb	0	; () banked
  1601  00087E  5191               	movf	sprintf@idx& (0+255),w,b
  1602  000880  0D01               	mullw	1
  1603  000882  0E18               	movlw	low STR_2
  1604  000884  24F3               	addwf	prodl,w,c
  1605  000886  6EF6               	movwf	tblptrl,c
  1606  000888  0E06               	movlw	high STR_2
  1607  00088A  20F4               	addwfc	prodh,w,c
  1608  00088C  6EF7               	movwf	tblptrh,c
  1609  00088E                     	if	0	;There are less than 3 active tblptr bytes
  1610  00088E                     	endif
  1611  00088E  0008               	tblrd		*
  1612  000890  CFF5 F09A          	movff	tablat,sprintf@c
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;doprnt.c: 1508: }
  1616                           ;doprnt.c: 1523: }
  1617                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1618  000894  C087  FFD9         	movff	sprintf@sp,fsr2l
  1619  000898  C088  FFDA         	movff	sprintf@sp+1,fsr2h
  1620  00089C  C09A  FFDF         	movff	sprintf@c,indf2
  1621                           
  1622                           ; BSR set to: 0
  1623  0008A0  0100               	movlb	0	; () banked
  1624  0008A2  4B87               	infsnz	sprintf@sp& (0+255),f,b
  1625  0008A4  2B88               	incf	(sprintf@sp+1)& (0+255),f,b
  1626  0008A6                     l1688:
  1627                           
  1628                           ; BSR set to: 0
  1629  0008A6  0100               	movlb	0	; () banked
  1630  0008A8  0797               	decf	sprintf@prec& (0+255),f,b
  1631  0008AA  0100               	movlb	0	; () banked
  1632  0008AC  2997               	incf	sprintf@prec& (0+255),w,b
  1633  0008AE  A4D8               	btfss	status,2,c
  1634  0008B0  D7CB               	goto	l1680
  1635  0008B2                     l1690:
  1636  0008B2  C089  FFF6         	movff	sprintf@f,tblptrl
  1637  0008B6  C08A  FFF7         	movff	sprintf@f+1,tblptrh
  1638  0008BA  0100               	movlb	0	; () banked
  1639  0008BC  4B89               	infsnz	sprintf@f& (0+255),f,b
  1640  0008BE  2B8A               	incf	(sprintf@f+1)& (0+255),f,b
  1641  0008C0                     	if	0	;tblptru may be non-zero
  1642  0008C0                     	endif
  1643  0008C0                     	if	0	;tblptru may be non-zero
  1644  0008C0                     	endif
  1645  0008C0  0008               	tblrd		*
  1646  0008C2  CFF5 F09A          	movff	tablat,sprintf@c
  1647  0008C6  0100               	movlb	0	; () banked
  1648  0008C8  519A               	movf	sprintf@c& (0+255),w,b
  1649  0008CA  A4D8               	btfss	status,2,c
  1650  0008CC  D6B9               	goto	l1608
  1651  0008CE                     l1692:
  1652                           
  1653                           ;doprnt.c: 1538: *sp = 0;
  1654  0008CE  C087  FFD9         	movff	sprintf@sp,fsr2l
  1655  0008D2  C088  FFDA         	movff	sprintf@sp+1,fsr2h
  1656  0008D6  0E00               	movlw	0
  1657  0008D8  6EDF               	movwf	indf2,c
  1658  0008DA  0012               	return	
  1659  0008DC                     __end_of_sprintf:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           prodh	equ	0xFF4
  1666                           prodl	equ	0xFF3
  1667                           intcon	equ	0xFF2
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postdec1	equ	0xFE5
  1671                           plusw1	equ	0xFE3
  1672                           fsr1h	equ	0xFE2
  1673                           fsr1l	equ	0xFE1
  1674                           indf2	equ	0xFDF
  1675                           postinc2	equ	0xFDE
  1676                           postdec2	equ	0xFDD
  1677                           plusw2	equ	0xFDB
  1678                           fsr2h	equ	0xFDA
  1679                           fsr2l	equ	0xFD9
  1680                           status	equ	0xFD8
  1681                           
  1682 ;; *************** function _isdigit *****************
  1683 ;; Defined at:
  1684 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  c               1    wreg     unsigned char 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  c               1    2[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;		None               void
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1698 ;;      Params:         0       0       0       0       0       0       0
  1699 ;;      Locals:         0       2       0       0       0       0       0
  1700 ;;      Temps:          0       1       0       0       0       0       0
  1701 ;;      Totals:         0       3       0       0       0       0       0
  1702 ;;Total ram usage:        3 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    2
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_sprintf
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text6
  1713  000DD4                     __ptext6:
  1714                           	opt stack 0
  1715  000DD4                     _isdigit:
  1716                           	opt stack 27
  1717                           
  1718                           ;incstack = 0
  1719                           ;isdigit@c stored from wreg
  1720  000DD4  0100               	movlb	0	; () banked
  1721  000DD6  6F82               	movwf	isdigit@c& (0+255),b
  1722  000DD8  0E00               	movlw	0
  1723  000DDA  0100               	movlb	0	; () banked
  1724  000DDC  6F81               	movwf	_isdigit$860& (0+255),b
  1725                           
  1726                           ; BSR set to: 0
  1727  000DDE  0E3A               	movlw	58
  1728  000DE0  0100               	movlb	0	; () banked
  1729  000DE2  6182               	cpfslt	isdigit@c& (0+255),b
  1730  000DE4  D007               	goto	l1468
  1731                           
  1732                           ; BSR set to: 0
  1733  000DE6  0E2F               	movlw	47
  1734  000DE8  0100               	movlb	0	; () banked
  1735  000DEA  6582               	cpfsgt	isdigit@c& (0+255),b
  1736  000DEC  D003               	goto	l1468
  1737                           
  1738                           ; BSR set to: 0
  1739  000DEE  0E01               	movlw	1
  1740  000DF0  0100               	movlb	0	; () banked
  1741  000DF2  6F81               	movwf	_isdigit$860& (0+255),b
  1742  000DF4                     l1468:
  1743                           
  1744                           ; BSR set to: 0
  1745  000DF4  C081  F080         	movff	_isdigit$860,??_isdigit
  1746  000DF8  0100               	movlb	0	; () banked
  1747  000DFA  3180               	rrcf	??_isdigit& (0+255),w,b
  1748  000DFC  0012               	return	
  1749  000DFE                     __end_of_isdigit:
  1750                           	opt stack 0
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           prodh	equ	0xFF4
  1756                           prodl	equ	0xFF3
  1757                           intcon	equ	0xFF2
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postdec1	equ	0xFE5
  1761                           plusw1	equ	0xFE3
  1762                           fsr1h	equ	0xFE2
  1763                           fsr1l	equ	0xFE1
  1764                           indf2	equ	0xFDF
  1765                           postinc2	equ	0xFDE
  1766                           postdec2	equ	0xFDD
  1767                           plusw2	equ	0xFDB
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function ___lwdiv *****************
  1773 ;; Defined at:
  1774 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  dividend        2    0[BANK0 ] unsigned int 
  1777 ;;  divisor         2    2[BANK0 ] unsigned int 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  quotient        2    5[BANK0 ] unsigned int 
  1780 ;;  counter         1    4[BANK0 ] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  2    0[BANK0 ] unsigned int 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1790 ;;      Params:         0       4       0       0       0       0       0
  1791 ;;      Locals:         0       3       0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0
  1793 ;;      Totals:         0       7       0       0       0       0       0
  1794 ;;Total ram usage:        7 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    2
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_sprintf
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text7
  1805  000BAC                     __ptext7:
  1806                           	opt stack 0
  1807  000BAC                     ___lwdiv:
  1808                           	opt stack 27
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;incstack = 0
  1812  000BAC  0E00               	movlw	0
  1813  000BAE  0100               	movlb	0	; () banked
  1814  000BB0  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1815  000BB2  0E00               	movlw	0
  1816  000BB4  6F85               	movwf	___lwdiv@quotient& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819  000BB6  0100               	movlb	0	; () banked
  1820  000BB8  5182               	movf	___lwdiv@divisor& (0+255),w,b
  1821  000BBA  0100               	movlb	0	; () banked
  1822  000BBC  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1823  000BBE  B4D8               	btfsc	status,2,c
  1824  000BC0  D02C               	goto	l577
  1825                           
  1826                           ; BSR set to: 0
  1827  000BC2  0E01               	movlw	1
  1828  000BC4  0100               	movlb	0	; () banked
  1829  000BC6  6F84               	movwf	___lwdiv@counter& (0+255),b
  1830  000BC8  D006               	goto	l1486
  1831  000BCA                     l1484:
  1832                           
  1833                           ; BSR set to: 0
  1834  000BCA  0100               	movlb	0	; () banked
  1835  000BCC  90D8               	bcf	status,0,c
  1836  000BCE  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  1837  000BD0  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1838  000BD2  0100               	movlb	0	; () banked
  1839  000BD4  2B84               	incf	___lwdiv@counter& (0+255),f,b
  1840  000BD6                     l1486:
  1841                           
  1842                           ; BSR set to: 0
  1843  000BD6  0100               	movlb	0	; () banked
  1844  000BD8  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1845  000BDA  D7F7               	goto	l1484
  1846  000BDC                     l1488:
  1847                           
  1848                           ; BSR set to: 0
  1849  000BDC  0100               	movlb	0	; () banked
  1850  000BDE  90D8               	bcf	status,0,c
  1851  000BE0  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  1852  000BE2  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1853                           
  1854                           ; BSR set to: 0
  1855  000BE4  0100               	movlb	0	; () banked
  1856  000BE6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  1857  000BE8  0100               	movlb	0	; () banked
  1858  000BEA  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  1859  000BEC  0100               	movlb	0	; () banked
  1860  000BEE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1861  000BF0  0100               	movlb	0	; () banked
  1862  000BF2  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1863  000BF4  A0D8               	btfss	status,0,c
  1864  000BF6  D00A               	goto	l1496
  1865                           
  1866                           ; BSR set to: 0
  1867  000BF8  0100               	movlb	0	; () banked
  1868  000BFA  5182               	movf	___lwdiv@divisor& (0+255),w,b
  1869  000BFC  0100               	movlb	0	; () banked
  1870  000BFE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  1871  000C00  0100               	movlb	0	; () banked
  1872  000C02  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1873  000C04  0100               	movlb	0	; () banked
  1874  000C06  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1875                           
  1876                           ; BSR set to: 0
  1877  000C08  0100               	movlb	0	; () banked
  1878  000C0A  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  1879  000C0C                     l1496:
  1880                           
  1881                           ; BSR set to: 0
  1882  000C0C  0100               	movlb	0	; () banked
  1883  000C0E  90D8               	bcf	status,0,c
  1884  000C10  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1885  000C12  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  1886                           
  1887                           ; BSR set to: 0
  1888  000C14  0100               	movlb	0	; () banked
  1889  000C16  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  1890  000C18  D7E1               	goto	l1488
  1891  000C1A                     l577:
  1892                           
  1893                           ; BSR set to: 0
  1894  000C1A  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  1895  000C1E  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1896                           
  1897                           ; BSR set to: 0
  1898  000C22  0012               	return		;funcret
  1899  000C24                     __end_of___lwdiv:
  1900                           	opt stack 0
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           prodh	equ	0xFF4
  1906                           prodl	equ	0xFF3
  1907                           intcon	equ	0xFF2
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           postdec1	equ	0xFE5
  1911                           plusw1	equ	0xFE3
  1912                           fsr1h	equ	0xFE2
  1913                           fsr1l	equ	0xFE1
  1914                           indf2	equ	0xFDF
  1915                           postinc2	equ	0xFDE
  1916                           postdec2	equ	0xFDD
  1917                           plusw2	equ	0xFDB
  1918                           fsr2h	equ	0xFDA
  1919                           fsr2l	equ	0xFD9
  1920                           status	equ	0xFD8
  1921                           
  1922 ;; *************** function _flash_read *****************
  1923 ;; Defined at:
  1924 ;;		line 16 in file "main.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  flash_addr      2    0[BANK0 ] unsigned int 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  flash_l         1    5[BANK0 ] unsigned char 
  1929 ;;  flash_h         1    4[BANK0 ] unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  2    0[BANK0 ] unsigned int 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1939 ;;      Params:         0       2       0       0       0       0       0
  1940 ;;      Locals:         0       2       0       0       0       0       0
  1941 ;;      Temps:          0       2       0       0       0       0       0
  1942 ;;      Totals:         0       6       0       0       0       0       0
  1943 ;;Total ram usage:        6 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; Hardware stack levels required when called:    2
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text8
  1954  000C24                     __ptext8:
  1955                           	opt stack 0
  1956  000C24                     _flash_read:
  1957                           	opt stack 28
  1958                           
  1959                           ;main.c: 17: uint8_t flash_h = 0;
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;incstack = 0
  1963  000C24  0E00               	movlw	0
  1964  000C26  0100               	movlb	0	; () banked
  1965  000C28  6F84               	movwf	flash_read@flash_h& (0+255),b
  1966                           
  1967                           ;main.c: 18: uint8_t flash_l = 0;
  1968  000C2A  0E00               	movlw	0
  1969  000C2C  0100               	movlb	0	; () banked
  1970  000C2E  6F85               	movwf	flash_read@flash_l& (0+255),b
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;main.c: 20: TBLPTR = flash_addr + 1;
  1974  000C30  0E01               	movlw	1
  1975  000C32  0100               	movlb	0	; () banked
  1976  000C34  2580               	addwf	flash_read@flash_addr& (0+255),w,b
  1977  000C36  0100               	movlb	0	; () banked
  1978  000C38  6F82               	movwf	??_flash_read& (0+255),b
  1979  000C3A  0E00               	movlw	0
  1980  000C3C  0100               	movlb	0	; () banked
  1981  000C3E  2181               	addwfc	(flash_read@flash_addr+1)& (0+255),w,b
  1982  000C40  0100               	movlb	0	; () banked
  1983  000C42  6F83               	movwf	(??_flash_read+1)& (0+255),b
  1984  000C44  C082  FFF6         	movff	??_flash_read,tblptrl	;volatile
  1985  000C48  C083  FFF7         	movff	??_flash_read+1,tblptrh	;volatile
  1986  000C4C  6AF8               	clrf	tblptru,c	;volatile
  1987  000C4E  0008               	tblrd		*	;# 
  1988                           
  1989                           ;main.c: 22: flash_h = TABLAT;
  1990  000C50  CFF5 F084          	movff	tablat,flash_read@flash_h	;volatile
  1991                           
  1992                           ;main.c: 27: TBLPTR = flash_addr;
  1993  000C54  C080  FFF6         	movff	flash_read@flash_addr,tblptrl	;volatile
  1994  000C58  C081  FFF7         	movff	flash_read@flash_addr+1,tblptrh	;volatile
  1995  000C5C  6AF8               	clrf	tblptru,c	;volatile
  1996  000C5E  0008               	tblrd		*	;# 
  1997                           
  1998                           ;main.c: 29: flash_l = TABLAT;
  1999  000C60  CFF5 F085          	movff	tablat,flash_read@flash_l	;volatile
  2000                           
  2001                           ;main.c: 33: return (flash_h << 8) | flash_l;
  2002  000C64  0100               	movlb	0	; () banked
  2003  000C66  5185               	movf	flash_read@flash_l& (0+255),w,b
  2004  000C68  C084  F082         	movff	flash_read@flash_h,??_flash_read
  2005  000C6C  0100               	movlb	0	; () banked
  2006  000C6E  6B83               	clrf	(??_flash_read+1)& (0+255),b
  2007  000C70  C082  F083         	movff	??_flash_read,??_flash_read+1
  2008  000C74  0100               	movlb	0	; () banked
  2009  000C76  6B82               	clrf	??_flash_read& (0+255),b
  2010  000C78  0100               	movlb	0	; () banked
  2011  000C7A  1182               	iorwf	??_flash_read& (0+255),w,b
  2012  000C7C  0100               	movlb	0	; () banked
  2013  000C7E  6F80               	movwf	?_flash_read& (0+255),b
  2014  000C80  0100               	movlb	0	; () banked
  2015  000C82  5183               	movf	(??_flash_read+1)& (0+255),w,b
  2016  000C84  0100               	movlb	0	; () banked
  2017  000C86  6F81               	movwf	(?_flash_read+1)& (0+255),b
  2018  000C88  0012               	return	
  2019  000C8A                     __end_of_flash_read:
  2020                           	opt stack 0
  2021                           tblptru	equ	0xFF8
  2022                           tblptrh	equ	0xFF7
  2023                           tblptrl	equ	0xFF6
  2024                           tablat	equ	0xFF5
  2025                           prodh	equ	0xFF4
  2026                           prodl	equ	0xFF3
  2027                           intcon	equ	0xFF2
  2028                           postinc0	equ	0xFEE
  2029                           wreg	equ	0xFE8
  2030                           postdec1	equ	0xFE5
  2031                           plusw1	equ	0xFE3
  2032                           fsr1h	equ	0xFE2
  2033                           fsr1l	equ	0xFE1
  2034                           indf2	equ	0xFDF
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           plusw2	equ	0xFDB
  2038                           fsr2h	equ	0xFDA
  2039                           fsr2l	equ	0xFD9
  2040                           status	equ	0xFD8
  2041                           
  2042 ;; *************** function _flash_block_write *****************
  2043 ;; Defined at:
  2044 ;;		line 77 in file "main.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;  addr            2    6[BANK0 ] unsigned int 
  2047 ;;  flash_data_b    2    8[BANK0 ] PTR unsigned char 
  2048 ;;		 -> main@flash_data(64), 
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  flash_store_   64   10[BANK0 ] unsigned char [64]
  2051 ;;  flash_ptr       2   74[BANK0 ] unsigned int 
  2052 ;;  i               1   76[BANK0 ] char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  1    wreg      void 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2062 ;;      Params:         0       4       0       0       0       0       0
  2063 ;;      Locals:         0      67       0       0       0       0       0
  2064 ;;      Temps:          0       0       0       0       0       0       0
  2065 ;;      Totals:         0      71       0       0       0       0       0
  2066 ;;Total ram usage:       71 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    3
  2069 ;; This function calls:
  2070 ;;		___wmul
  2071 ;;		_flash_block_commit
  2072 ;;		_flash_block_delete
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text9
  2079  0008DC                     __ptext9:
  2080                           	opt stack 0
  2081  0008DC                     _flash_block_write:
  2082                           	opt stack 27
  2083                           
  2084                           ;main.c: 78: int8_t i = 0;
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;incstack = 0
  2088  0008DC  0E00               	movlw	0
  2089  0008DE  0100               	movlb	0	; () banked
  2090  0008E0  6FCC               	movwf	flash_block_write@i& (0+255),b
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;main.c: 79: uint8_t flash_store_buff[64] = {0};
  2094  0008E2  EE20  F001         	lfsr	2,flash_block_write@F3209
  2095  0008E6  EE10  F08A         	lfsr	1,flash_block_write@flash_store_buff
  2096  0008EA  0E3F               	movlw	63
  2097  0008EC                     u811:
  2098  0008EC  CFDB FFE3          	movff	plusw2,plusw1
  2099  0008F0  06E8               	decf	wreg,f,c
  2100  0008F2  E2FC               	bc	u811
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;main.c: 80: uint16_t flash_ptr = addr;
  2104  0008F4  C086  F0CA         	movff	flash_block_write@addr,flash_block_write@flash_ptr
  2105  0008F8  C087  F0CB         	movff	flash_block_write@addr+1,flash_block_write@flash_ptr+1
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;main.c: 83: for(i = 0; i<64 ;i++){
  2109  0008FC  0E00               	movlw	0
  2110  0008FE  0100               	movlb	0	; () banked
  2111  000900  6FCC               	movwf	flash_block_write@i& (0+255),b
  2112  000902                     l1522:
  2113                           
  2114                           ; BSR set to: 0
  2115  000902  0100               	movlb	0	; () banked
  2116  000904  51CC               	movf	flash_block_write@i& (0+255),w,b
  2117  000906  0A80               	xorlw	128
  2118  000908  0F40               	addlw	-192
  2119  00090A  B0D8               	btfsc	status,0,c
  2120  00090C  D017               	goto	l1536
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;main.c: 84: TBLPTR = flash_ptr;
  2124                           
  2125                           ; BSR set to: 0
  2126                           
  2127                           ; BSR set to: 0
  2128  00090E  C0CA  FFF6         	movff	flash_block_write@flash_ptr,tblptrl	;volatile
  2129  000912  C0CB  FFF7         	movff	flash_block_write@flash_ptr+1,tblptrh	;volatile
  2130  000916  6AF8               	clrf	tblptru,c	;volatile
  2131  000918  0008               	tblrd		*	;# 
  2132                           
  2133                           ;main.c: 86: flash_store_buff[i] = TABLAT;
  2134  00091A  0100               	movlb	0	; () banked
  2135  00091C  51CC               	movf	flash_block_write@i& (0+255),w,b
  2136  00091E  0D01               	mullw	1
  2137  000920  0E8A               	movlw	low flash_block_write@flash_store_buff
  2138  000922  24F3               	addwf	prodl,w,c
  2139  000924  6ED9               	movwf	fsr2l,c
  2140  000926  0E00               	movlw	high flash_block_write@flash_store_buff
  2141  000928  20F4               	addwfc	prodh,w,c
  2142  00092A  6EDA               	movwf	fsr2h,c
  2143  00092C  CFF5 FFDF          	movff	tablat,indf2	;volatile
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;main.c: 87: flash_ptr++;
  2147  000930  0100               	movlb	0	; () banked
  2148  000932  4BCA               	infsnz	flash_block_write@flash_ptr& (0+255),f,b
  2149  000934  2BCB               	incf	(flash_block_write@flash_ptr+1)& (0+255),f,b
  2150                           
  2151                           ; BSR set to: 0
  2152  000936  0100               	movlb	0	; () banked
  2153  000938  2BCC               	incf	flash_block_write@i& (0+255),f,b
  2154  00093A  D7E3               	goto	l1522
  2155  00093C                     l1536:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 88: }
  2159                           ;main.c: 92: flash_block_delete(addr);
  2160  00093C  C086  F080         	movff	flash_block_write@addr,flash_block_delete@addr
  2161  000940  C087  F081         	movff	flash_block_write@addr+1,flash_block_delete@addr+1
  2162  000944  ECFF  F006         	call	_flash_block_delete	;wreg free
  2163                           
  2164                           ;main.c: 95: flash_ptr = addr;
  2165  000948  C086  F0CA         	movff	flash_block_write@addr,flash_block_write@flash_ptr
  2166  00094C  C087  F0CB         	movff	flash_block_write@addr+1,flash_block_write@flash_ptr+1
  2167                           
  2168                           ;main.c: 96: for(i = 0; i<32 ;i++){
  2169  000950  0E00               	movlw	0
  2170  000952  0100               	movlb	0	; () banked
  2171  000954  6FCC               	movwf	flash_block_write@i& (0+255),b
  2172  000956                     l1542:
  2173                           
  2174                           ; BSR set to: 0
  2175  000956  0100               	movlb	0	; () banked
  2176  000958  51CC               	movf	flash_block_write@i& (0+255),w,b
  2177  00095A  0A80               	xorlw	128
  2178  00095C  0F60               	addlw	-160
  2179  00095E  B0D8               	btfsc	status,0,c
  2180  000960  D026               	goto	l1556
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;main.c: 97: TBLPTR = flash_ptr;
  2184                           
  2185                           ; BSR set to: 0
  2186                           
  2187                           ; BSR set to: 0
  2188  000962  C0CA  FFF6         	movff	flash_block_write@flash_ptr,tblptrl	;volatile
  2189  000966  C0CB  FFF7         	movff	flash_block_write@flash_ptr+1,tblptrh	;volatile
  2190  00096A  6AF8               	clrf	tblptru,c	;volatile
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 98: TABLAT = flash_data_buff[i];
  2194  00096C  0100               	movlb	0	; () banked
  2195  00096E  51CC               	movf	flash_block_write@i& (0+255),w,b
  2196  000970  0100               	movlb	0	; () banked
  2197  000972  6F80               	movwf	___wmul@multiplier& (0+255),b
  2198  000974  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  2199  000976  BF80               	btfsc	___wmul@multiplier& (0+255),7,b
  2200  000978  0781               	decf	(___wmul@multiplier+1)& (0+255),f,b
  2201  00097A  0E00               	movlw	0
  2202  00097C  0100               	movlb	0	; () banked
  2203  00097E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2204  000980  0E01               	movlw	1
  2205  000982  6F82               	movwf	___wmul@multiplicand& (0+255),b
  2206  000984  ECCF  F006         	call	___wmul	;wreg free
  2207  000988  0100               	movlb	0	; () banked
  2208  00098A  5180               	movf	?___wmul& (0+255),w,b
  2209  00098C  0100               	movlb	0	; () banked
  2210  00098E  2588               	addwf	flash_block_write@flash_data_buff& (0+255),w,b
  2211  000990  6ED9               	movwf	fsr2l,c
  2212  000992  0100               	movlb	0	; () banked
  2213  000994  5181               	movf	(?___wmul+1)& (0+255),w,b
  2214  000996  0100               	movlb	0	; () banked
  2215  000998  2189               	addwfc	(flash_block_write@flash_data_buff+1)& (0+255),w,b
  2216  00099A  6EDA               	movwf	fsr2h,c
  2217  00099C  50DF               	movf	indf2,w,c
  2218  00099E  6EF5               	movwf	tablat,c	;volatile
  2219  0009A0  000C               	tblwt		*	;# 
  2220                           
  2221                           ;main.c: 100: flash_ptr++;
  2222  0009A2  0100               	movlb	0	; () banked
  2223  0009A4  4BCA               	infsnz	flash_block_write@flash_ptr& (0+255),f,b
  2224  0009A6  2BCB               	incf	(flash_block_write@flash_ptr+1)& (0+255),f,b
  2225                           
  2226                           ; BSR set to: 0
  2227  0009A8  0100               	movlb	0	; () banked
  2228  0009AA  2BCC               	incf	flash_block_write@i& (0+255),f,b
  2229  0009AC  D7D4               	goto	l1542
  2230  0009AE                     l1556:
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 101: }
  2234                           ;main.c: 103: flash_block_commit();
  2235  0009AE  EC11  F007         	call	_flash_block_commit	;wreg free
  2236                           
  2237                           ;main.c: 106: for(i = 32; i<64 ;i++){
  2238  0009B2  0E20               	movlw	32
  2239  0009B4  0100               	movlb	0	; () banked
  2240  0009B6  6FCC               	movwf	flash_block_write@i& (0+255),b
  2241  0009B8                     l1560:
  2242                           
  2243                           ; BSR set to: 0
  2244  0009B8  0100               	movlb	0	; () banked
  2245  0009BA  51CC               	movf	flash_block_write@i& (0+255),w,b
  2246  0009BC  0A80               	xorlw	128
  2247  0009BE  0F40               	addlw	-192
  2248  0009C0  B0D8               	btfsc	status,0,c
  2249  0009C2  D026               	goto	l1574
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;main.c: 107: TBLPTR = flash_ptr;
  2253                           
  2254                           ; BSR set to: 0
  2255                           
  2256                           ; BSR set to: 0
  2257  0009C4  C0CA  FFF6         	movff	flash_block_write@flash_ptr,tblptrl	;volatile
  2258  0009C8  C0CB  FFF7         	movff	flash_block_write@flash_ptr+1,tblptrh	;volatile
  2259  0009CC  6AF8               	clrf	tblptru,c	;volatile
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;main.c: 108: TABLAT = flash_data_buff[i];
  2263  0009CE  0100               	movlb	0	; () banked
  2264  0009D0  51CC               	movf	flash_block_write@i& (0+255),w,b
  2265  0009D2  0100               	movlb	0	; () banked
  2266  0009D4  6F80               	movwf	___wmul@multiplier& (0+255),b
  2267  0009D6  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  2268  0009D8  BF80               	btfsc	___wmul@multiplier& (0+255),7,b
  2269  0009DA  0781               	decf	(___wmul@multiplier+1)& (0+255),f,b
  2270  0009DC  0E00               	movlw	0
  2271  0009DE  0100               	movlb	0	; () banked
  2272  0009E0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2273  0009E2  0E01               	movlw	1
  2274  0009E4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  2275  0009E6  ECCF  F006         	call	___wmul	;wreg free
  2276  0009EA  0100               	movlb	0	; () banked
  2277  0009EC  5180               	movf	?___wmul& (0+255),w,b
  2278  0009EE  0100               	movlb	0	; () banked
  2279  0009F0  2588               	addwf	flash_block_write@flash_data_buff& (0+255),w,b
  2280  0009F2  6ED9               	movwf	fsr2l,c
  2281  0009F4  0100               	movlb	0	; () banked
  2282  0009F6  5181               	movf	(?___wmul+1)& (0+255),w,b
  2283  0009F8  0100               	movlb	0	; () banked
  2284  0009FA  2189               	addwfc	(flash_block_write@flash_data_buff+1)& (0+255),w,b
  2285  0009FC  6EDA               	movwf	fsr2h,c
  2286  0009FE  50DF               	movf	indf2,w,c
  2287  000A00  6EF5               	movwf	tablat,c	;volatile
  2288  000A02  000C               	tblwt		*	;# 
  2289                           
  2290                           ;main.c: 110: flash_ptr++;
  2291  000A04  0100               	movlb	0	; () banked
  2292  000A06  4BCA               	infsnz	flash_block_write@flash_ptr& (0+255),f,b
  2293  000A08  2BCB               	incf	(flash_block_write@flash_ptr+1)& (0+255),f,b
  2294                           
  2295                           ; BSR set to: 0
  2296  000A0A  0100               	movlb	0	; () banked
  2297  000A0C  2BCC               	incf	flash_block_write@i& (0+255),f,b
  2298  000A0E  D7D4               	goto	l1560
  2299  000A10                     l1574:
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;main.c: 111: }
  2303                           ;main.c: 113: flash_block_commit();
  2304  000A10  EC11  F007         	call	_flash_block_commit	;wreg free
  2305  000A14  0012               	return		;funcret
  2306  000A16                     __end_of_flash_block_write:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           intcon	equ	0xFF2
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           plusw1	equ	0xFE3
  2319                           fsr1h	equ	0xFE2
  2320                           fsr1l	equ	0xFE1
  2321                           indf2	equ	0xFDF
  2322                           postinc2	equ	0xFDE
  2323                           postdec2	equ	0xFDD
  2324                           plusw2	equ	0xFDB
  2325                           fsr2h	equ	0xFDA
  2326                           fsr2l	equ	0xFD9
  2327                           status	equ	0xFD8
  2328                           
  2329 ;; *************** function _flash_block_delete *****************
  2330 ;; Defined at:
  2331 ;;		line 38 in file "main.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  addr            2    0[BANK0 ] unsigned int 
  2334 ;; Auto vars:     Size  Location     Type
  2335 ;;		None
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  1    wreg      void 
  2338 ;; Registers used:
  2339 ;;		wreg, status,2
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2345 ;;      Params:         0       2       0       0       0       0       0
  2346 ;;      Locals:         0       0       0       0       0       0       0
  2347 ;;      Temps:          0       0       0       0       0       0       0
  2348 ;;      Totals:         0       2       0       0       0       0       0
  2349 ;;Total ram usage:        2 bytes
  2350 ;; Hardware stack levels used:    1
  2351 ;; Hardware stack levels required when called:    2
  2352 ;; This function calls:
  2353 ;;		Nothing
  2354 ;; This function is called by:
  2355 ;;		_flash_block_write
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text10
  2360  000DFE                     __ptext10:
  2361                           	opt stack 0
  2362  000DFE                     _flash_block_delete:
  2363                           	opt stack 27
  2364                           
  2365                           ;main.c: 40: TBLPTR = addr;
  2366                           
  2367                           ;incstack = 0
  2368  000DFE  C080  FFF6         	movff	flash_block_delete@addr,tblptrl	;volatile
  2369  000E02  C081  FFF7         	movff	flash_block_delete@addr+1,tblptrh	;volatile
  2370  000E06  6AF8               	clrf	tblptru,c	;volatile
  2371                           
  2372                           ;main.c: 42: EECON1bits.EEPGD = 1;
  2373  000E08  8EA6               	bsf	4006,7,c	;volatile
  2374                           
  2375                           ;main.c: 43: EECON1bits.CFGS = 0;
  2376  000E0A  9CA6               	bcf	4006,6,c	;volatile
  2377                           
  2378                           ;main.c: 44: EECON1bits.WREN = 1;
  2379  000E0C  84A6               	bsf	4006,2,c	;volatile
  2380                           
  2381                           ;main.c: 45: EECON1bits.FREE = 1;
  2382  000E0E  88A6               	bsf	4006,4,c	;volatile
  2383                           
  2384                           ;main.c: 47: INTCONbits.GIEH = 0;
  2385  000E10  9EF2               	bcf	intcon,7,c	;volatile
  2386                           
  2387                           ;main.c: 49: EECON2 = 0x55;
  2388  000E12  0E55               	movlw	85
  2389  000E14  6EA7               	movwf	4007,c	;volatile
  2390                           
  2391                           ;main.c: 50: EECON2 = 0xAA;
  2392  000E16  0EAA               	movlw	170
  2393  000E18  6EA7               	movwf	4007,c	;volatile
  2394                           
  2395                           ;main.c: 52: EECON1bits.WR = 1;
  2396  000E1A  82A6               	bsf	4006,1,c	;volatile
  2397                           
  2398                           ;main.c: 54: EECON1bits.WREN = 0;
  2399  000E1C  94A6               	bcf	4006,2,c	;volatile
  2400                           
  2401                           ;main.c: 55: INTCONbits.GIEH = 1;
  2402  000E1E  8EF2               	bsf	intcon,7,c	;volatile
  2403  000E20  0012               	return		;funcret
  2404  000E22                     __end_of_flash_block_delete:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           prodh	equ	0xFF4
  2411                           prodl	equ	0xFF3
  2412                           intcon	equ	0xFF2
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           postdec1	equ	0xFE5
  2416                           plusw1	equ	0xFE3
  2417                           fsr1h	equ	0xFE2
  2418                           fsr1l	equ	0xFE1
  2419                           indf2	equ	0xFDF
  2420                           postinc2	equ	0xFDE
  2421                           postdec2	equ	0xFDD
  2422                           plusw2	equ	0xFDB
  2423                           fsr2h	equ	0xFDA
  2424                           fsr2l	equ	0xFD9
  2425                           status	equ	0xFD8
  2426                           
  2427 ;; *************** function _flash_block_commit *****************
  2428 ;; Defined at:
  2429 ;;		line 59 in file "main.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg, status,2
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2443 ;;      Params:         0       0       0       0       0       0       0
  2444 ;;      Locals:         0       0       0       0       0       0       0
  2445 ;;      Temps:          0       0       0       0       0       0       0
  2446 ;;      Totals:         0       0       0       0       0       0       0
  2447 ;;Total ram usage:        0 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    2
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_flash_block_write
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text11
  2458  000E22                     __ptext11:
  2459                           	opt stack 0
  2460  000E22                     _flash_block_commit:
  2461                           	opt stack 27
  2462                           
  2463                           ;main.c: 61: EECON1bits.EEPGD = 1;
  2464                           
  2465                           ;incstack = 0
  2466  000E22  8EA6               	bsf	4006,7,c	;volatile
  2467                           
  2468                           ;main.c: 62: EECON1bits.CFGS = 0;
  2469  000E24  9CA6               	bcf	4006,6,c	;volatile
  2470                           
  2471                           ;main.c: 63: EECON1bits.WREN = 1;
  2472  000E26  84A6               	bsf	4006,2,c	;volatile
  2473                           
  2474                           ;main.c: 64: EECON1bits.FREE = 0;
  2475  000E28  98A6               	bcf	4006,4,c	;volatile
  2476                           
  2477                           ;main.c: 66: INTCONbits.GIEH = 0;
  2478  000E2A  9EF2               	bcf	intcon,7,c	;volatile
  2479                           
  2480                           ;main.c: 68: EECON2 = 0x55;
  2481  000E2C  0E55               	movlw	85
  2482  000E2E  6EA7               	movwf	4007,c	;volatile
  2483                           
  2484                           ;main.c: 69: EECON2 = 0xAA;
  2485  000E30  0EAA               	movlw	170
  2486  000E32  6EA7               	movwf	4007,c	;volatile
  2487                           
  2488                           ;main.c: 71: EECON1bits.WR = 1;
  2489  000E34  82A6               	bsf	4006,1,c	;volatile
  2490                           
  2491                           ;main.c: 73: EECON1bits.WREN = 0;
  2492  000E36  94A6               	bcf	4006,2,c	;volatile
  2493                           
  2494                           ;main.c: 74: INTCONbits.GIEH = 1;
  2495  000E38  8EF2               	bsf	intcon,7,c	;volatile
  2496  000E3A  0012               	return		;funcret
  2497  000E3C                     __end_of_flash_block_commit:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           prodh	equ	0xFF4
  2504                           prodl	equ	0xFF3
  2505                           intcon	equ	0xFF2
  2506                           postinc0	equ	0xFEE
  2507                           wreg	equ	0xFE8
  2508                           postdec1	equ	0xFE5
  2509                           plusw1	equ	0xFE3
  2510                           fsr1h	equ	0xFE2
  2511                           fsr1l	equ	0xFE1
  2512                           indf2	equ	0xFDF
  2513                           postinc2	equ	0xFDE
  2514                           postdec2	equ	0xFDD
  2515                           plusw2	equ	0xFDB
  2516                           fsr2h	equ	0xFDA
  2517                           fsr2l	equ	0xFD9
  2518                           status	equ	0xFD8
  2519                           
  2520 ;; *************** function ___wmul *****************
  2521 ;; Defined at:
  2522 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2525 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  product         2    4[BANK0 ] unsigned int 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  2    0[BANK0 ] unsigned int 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, prodl, prodh
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2537 ;;      Params:         0       4       0       0       0       0       0
  2538 ;;      Locals:         0       2       0       0       0       0       0
  2539 ;;      Temps:          0       0       0       0       0       0       0
  2540 ;;      Totals:         0       6       0       0       0       0       0
  2541 ;;Total ram usage:        6 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    2
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_flash_block_write
  2548 ;;		_sprintf
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text12
  2553  000D9E                     __ptext12:
  2554                           	opt stack 0
  2555  000D9E                     ___wmul:
  2556                           	opt stack 27
  2557                           
  2558                           ;incstack = 0
  2559  000D9E  0100               	movlb	0	; () banked
  2560  000DA0  5180               	movf	___wmul@multiplier& (0+255),w,b
  2561  000DA2  0100               	movlb	0	; () banked
  2562  000DA4  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2563  000DA6  CFF3 F084          	movff	prodl,___wmul@product
  2564  000DAA  CFF4 F085          	movff	prodh,___wmul@product+1
  2565  000DAE  0100               	movlb	0	; () banked
  2566  000DB0  5180               	movf	___wmul@multiplier& (0+255),w,b
  2567  000DB2  0100               	movlb	0	; () banked
  2568  000DB4  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2569  000DB6  50F3               	movf	prodl,w,c
  2570  000DB8  0100               	movlb	0	; () banked
  2571  000DBA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2572  000DBC  0100               	movlb	0	; () banked
  2573  000DBE  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2574  000DC0  0100               	movlb	0	; () banked
  2575  000DC2  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2576  000DC4  50F3               	movf	prodl,w,c
  2577  000DC6  0100               	movlb	0	; () banked
  2578  000DC8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2579                           
  2580                           ; BSR set to: 0
  2581  000DCA  C084  F080         	movff	___wmul@product,?___wmul
  2582  000DCE  C085  F081         	movff	___wmul@product+1,?___wmul+1
  2583  000DD2  0012               	return	
  2584  000DD4                     __end_of___wmul:
  2585                           	opt stack 0
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           prodh	equ	0xFF4
  2591                           prodl	equ	0xFF3
  2592                           intcon	equ	0xFF2
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           postdec1	equ	0xFE5
  2596                           plusw1	equ	0xFE3
  2597                           fsr1h	equ	0xFE2
  2598                           fsr1l	equ	0xFE1
  2599                           indf2	equ	0xFDF
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           plusw2	equ	0xFDB
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _low_isr *****************
  2608 ;; Defined at:
  2609 ;;		line 163 in file "main.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		None
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2623 ;;      Params:         0       0       0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0
  2625 ;;      Temps:         17       0       0       0       0       0       0
  2626 ;;      Totals:        17       0       0       0       0       0       0
  2627 ;;Total ram usage:       17 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    1
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		Interrupt level 1
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	intcodelo
  2638  000018                     __pintcodelo:
  2639                           	opt stack 0
  2640  000018                     _low_isr:
  2641                           	opt stack 27
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;incstack = 0
  2645  000018  8060               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2646  00001A  CFD8 F04F          	movff	status,??_low_isr
  2647  00001E  CFE8 F050          	movff	wreg,??_low_isr+1
  2648  000022  CFE0 F051          	movff	bsr,??_low_isr+2
  2649  000026  CFFA F052          	movff	pclath,??_low_isr+3
  2650  00002A  CFFB F053          	movff	pclatu,??_low_isr+4
  2651  00002E  CFE9 F054          	movff	fsr0l,??_low_isr+5
  2652  000032  CFEA F055          	movff	fsr0h,??_low_isr+6
  2653  000036  CFE1 F056          	movff	fsr1l,??_low_isr+7
  2654  00003A  CFE2 F057          	movff	fsr1h,??_low_isr+8
  2655  00003E  CFD9 F058          	movff	fsr2l,??_low_isr+9
  2656  000042  CFDA F059          	movff	fsr2h,??_low_isr+10
  2657  000046  CFF3 F05A          	movff	prodl,??_low_isr+11
  2658  00004A  CFF4 F05B          	movff	prodh,??_low_isr+12
  2659  00004E  CFF6 F05C          	movff	tblptrl,??_low_isr+13
  2660  000052  CFF7 F05D          	movff	tblptrh,??_low_isr+14
  2661  000056  CFF8 F05E          	movff	tblptru,??_low_isr+15
  2662  00005A  CFF5 F05F          	movff	tablat,??_low_isr+16
  2663                           
  2664                           ;main.c: 164: INTCONbits.GIEH = 0;
  2665  00005E  9EF2               	bcf	intcon,7,c	;volatile
  2666                           
  2667                           ;main.c: 167: }
  2668                           ;main.c: 168: INTCONbits.GIEH = 1;
  2669                           
  2670                           ;main.c: 165: if(0){
  2671  000060  8EF2               	bsf	intcon,7,c	;volatile
  2672  000062  C05F  FFF5         	movff	??_low_isr+16,tablat
  2673  000066  C05E  FFF8         	movff	??_low_isr+15,tblptru
  2674  00006A  C05D  FFF7         	movff	??_low_isr+14,tblptrh
  2675  00006E  C05C  FFF6         	movff	??_low_isr+13,tblptrl
  2676  000072  C05B  FFF4         	movff	??_low_isr+12,prodh
  2677  000076  C05A  FFF3         	movff	??_low_isr+11,prodl
  2678  00007A  C059  FFDA         	movff	??_low_isr+10,fsr2h
  2679  00007E  C058  FFD9         	movff	??_low_isr+9,fsr2l
  2680  000082  C057  FFE2         	movff	??_low_isr+8,fsr1h
  2681  000086  C056  FFE1         	movff	??_low_isr+7,fsr1l
  2682  00008A  C055  FFEA         	movff	??_low_isr+6,fsr0h
  2683  00008E  C054  FFE9         	movff	??_low_isr+5,fsr0l
  2684  000092  C053  FFFB         	movff	??_low_isr+4,pclatu
  2685  000096  C052  FFFA         	movff	??_low_isr+3,pclath
  2686  00009A  C051  FFE0         	movff	??_low_isr+2,bsr
  2687  00009E  C050  FFE8         	movff	??_low_isr+1,wreg
  2688  0000A2  C04F  FFD8         	movff	??_low_isr,status
  2689  0000A6  9060               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2690  0000A8  0010               	retfie	
  2691  0000AA                     __end_of_low_isr:
  2692                           	opt stack 0
  2693                           pclatu	equ	0xFFB
  2694                           pclath	equ	0xFFA
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           intcon	equ	0xFF2
  2702                           postinc0	equ	0xFEE
  2703                           fsr0h	equ	0xFEA
  2704                           fsr0l	equ	0xFE9
  2705                           wreg	equ	0xFE8
  2706                           postdec1	equ	0xFE5
  2707                           plusw1	equ	0xFE3
  2708                           fsr1h	equ	0xFE2
  2709                           fsr1l	equ	0xFE1
  2710                           bsr	equ	0xFE0
  2711                           indf2	equ	0xFDF
  2712                           postinc2	equ	0xFDE
  2713                           postdec2	equ	0xFDD
  2714                           plusw2	equ	0xFDB
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8
  2718                           
  2719 ;; *************** function _high_isr *****************
  2720 ;; Defined at:
  2721 ;;		line 153 in file "main.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		None
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2735 ;;      Params:         0       0       0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0
  2737 ;;      Temps:         14       0       0       0       0       0       0
  2738 ;;      Totals:        14       0       0       0       0       0       0
  2739 ;;Total ram usage:       14 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		Interrupt level 2
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	intcode
  2749  000008                     __pintcode:
  2750                           	opt stack 0
  2751  000008                     _high_isr:
  2752                           	opt stack 27
  2753                           
  2754                           ;incstack = 0
  2755  000008  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2756  00000A  ED99  F005         	call	int_func,f	;refresh shadow registers
  2757                           pclatu	equ	0xFFB
  2758                           pclath	equ	0xFFA
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           intcon	equ	0xFF2
  2766                           postinc0	equ	0xFEE
  2767                           fsr0h	equ	0xFEA
  2768                           fsr0l	equ	0xFE9
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           plusw1	equ	0xFE3
  2772                           fsr1h	equ	0xFE2
  2773                           fsr1l	equ	0xFE1
  2774                           bsr	equ	0xFE0
  2775                           indf2	equ	0xFDF
  2776                           postinc2	equ	0xFDE
  2777                           postdec2	equ	0xFDD
  2778                           plusw2	equ	0xFDB
  2779                           fsr2h	equ	0xFDA
  2780                           fsr2l	equ	0xFD9
  2781                           status	equ	0xFD8
  2782                           
  2783                           	psect	intcode_body
  2784  000B32                     __pintcode_body:
  2785                           	opt stack 27
  2786  000B32                     int_func:
  2787                           	opt stack 27
  2788  000B32  0006               	pop		; remove dummy address from shadow register refresh
  2789  000B34  CFFA F041          	movff	pclath,??_high_isr
  2790  000B38  CFFB F042          	movff	pclatu,??_high_isr+1
  2791  000B3C  CFE9 F043          	movff	fsr0l,??_high_isr+2
  2792  000B40  CFEA F044          	movff	fsr0h,??_high_isr+3
  2793  000B44  CFE1 F045          	movff	fsr1l,??_high_isr+4
  2794  000B48  CFE2 F046          	movff	fsr1h,??_high_isr+5
  2795  000B4C  CFD9 F047          	movff	fsr2l,??_high_isr+6
  2796  000B50  CFDA F048          	movff	fsr2h,??_high_isr+7
  2797  000B54  CFF3 F049          	movff	prodl,??_high_isr+8
  2798  000B58  CFF4 F04A          	movff	prodh,??_high_isr+9
  2799  000B5C  CFF6 F04B          	movff	tblptrl,??_high_isr+10
  2800  000B60  CFF7 F04C          	movff	tblptrh,??_high_isr+11
  2801  000B64  CFF8 F04D          	movff	tblptru,??_high_isr+12
  2802  000B68  CFF5 F04E          	movff	tablat,??_high_isr+13
  2803                           
  2804                           ;main.c: 154: INTCONbits.GIEH = 0;
  2805  000B6C  9EF2               	bcf	intcon,7,c	;volatile
  2806                           
  2807                           ;main.c: 158: }
  2808                           ;main.c: 160: INTCONbits.GIEH = 1;
  2809                           
  2810                           ;main.c: 155: if(0){
  2811  000B6E  8EF2               	bsf	intcon,7,c	;volatile
  2812  000B70  C04E  FFF5         	movff	??_high_isr+13,tablat
  2813  000B74  C04D  FFF8         	movff	??_high_isr+12,tblptru
  2814  000B78  C04C  FFF7         	movff	??_high_isr+11,tblptrh
  2815  000B7C  C04B  FFF6         	movff	??_high_isr+10,tblptrl
  2816  000B80  C04A  FFF4         	movff	??_high_isr+9,prodh
  2817  000B84  C049  FFF3         	movff	??_high_isr+8,prodl
  2818  000B88  C048  FFDA         	movff	??_high_isr+7,fsr2h
  2819  000B8C  C047  FFD9         	movff	??_high_isr+6,fsr2l
  2820  000B90  C046  FFE2         	movff	??_high_isr+5,fsr1h
  2821  000B94  C045  FFE1         	movff	??_high_isr+4,fsr1l
  2822  000B98  C044  FFEA         	movff	??_high_isr+3,fsr0h
  2823  000B9C  C043  FFE9         	movff	??_high_isr+2,fsr0l
  2824  000BA0  C042  FFFB         	movff	??_high_isr+1,pclatu
  2825  000BA4  C041  FFFA         	movff	??_high_isr,pclath
  2826  000BA8  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2827  000BAA  0011               	retfie		f
  2828  000BAC                     __end_of_high_isr:
  2829                           	opt stack 0
  2830                           pclatu	equ	0xFFB
  2831                           pclath	equ	0xFFA
  2832                           tblptru	equ	0xFF8
  2833                           tblptrh	equ	0xFF7
  2834                           tblptrl	equ	0xFF6
  2835                           tablat	equ	0xFF5
  2836                           prodh	equ	0xFF4
  2837                           prodl	equ	0xFF3
  2838                           intcon	equ	0xFF2
  2839                           postinc0	equ	0xFEE
  2840                           fsr0h	equ	0xFEA
  2841                           fsr0l	equ	0xFE9
  2842                           wreg	equ	0xFE8
  2843                           postdec1	equ	0xFE5
  2844                           plusw1	equ	0xFE3
  2845                           fsr1h	equ	0xFE2
  2846                           fsr1l	equ	0xFE1
  2847                           bsr	equ	0xFE0
  2848                           indf2	equ	0xFDF
  2849                           postinc2	equ	0xFDE
  2850                           postdec2	equ	0xFDD
  2851                           plusw2	equ	0xFDB
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           pclatu	equ	0xFFB
  2856                           pclath	equ	0xFFA
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           intcon	equ	0xFF2
  2864                           postinc0	equ	0xFEE
  2865                           fsr0h	equ	0xFEA
  2866                           fsr0l	equ	0xFE9
  2867                           wreg	equ	0xFE8
  2868                           postdec1	equ	0xFE5
  2869                           plusw1	equ	0xFE3
  2870                           fsr1h	equ	0xFE2
  2871                           fsr1l	equ	0xFE1
  2872                           bsr	equ	0xFE0
  2873                           indf2	equ	0xFDF
  2874                           postinc2	equ	0xFDE
  2875                           postdec2	equ	0xFDD
  2876                           plusw2	equ	0xFDB
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881                           	psect	rparam
  2882  0000                     pclatu	equ	0xFFB
  2883                           pclath	equ	0xFFA
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           prodh	equ	0xFF4
  2889                           prodl	equ	0xFF3
  2890                           intcon	equ	0xFF2
  2891                           postinc0	equ	0xFEE
  2892                           fsr0h	equ	0xFEA
  2893                           fsr0l	equ	0xFE9
  2894                           wreg	equ	0xFE8
  2895                           postdec1	equ	0xFE5
  2896                           plusw1	equ	0xFE3
  2897                           fsr1h	equ	0xFE2
  2898                           fsr1l	equ	0xFE1
  2899                           bsr	equ	0xFE0
  2900                           indf2	equ	0xFDF
  2901                           postinc2	equ	0xFDE
  2902                           postdec2	equ	0xFDD
  2903                           plusw2	equ	0xFDB
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908                           	psect	temp
  2909  000060                     btemp:
  2910                           	opt stack 0
  2911  000060                     	ds	1
  2912  0000                     int$flags	set	btemp
  2913                           pclatu	equ	0xFFB
  2914                           pclath	equ	0xFFA
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           intcon	equ	0xFF2
  2922                           postinc0	equ	0xFEE
  2923                           fsr0h	equ	0xFEA
  2924                           fsr0l	equ	0xFE9
  2925                           wreg	equ	0xFE8
  2926                           postdec1	equ	0xFE5
  2927                           plusw1	equ	0xFE3
  2928                           fsr1h	equ	0xFE2
  2929                           fsr1l	equ	0xFE1
  2930                           bsr	equ	0xFE0
  2931                           indf2	equ	0xFDF
  2932                           postinc2	equ	0xFDE
  2933                           postdec2	equ	0xFDD
  2934                           plusw2	equ	0xFDB
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    23
    Data        0
    BSS         384
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     31      95
    BANK0           128     79      79
    BANK1           256     65     129
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK2[256]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_send_string@c	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK2[256]), 

    uart_send_array@c	PTR unsigned char  size(2) Largest target is 15
		 -> program_start(CODE[15]), 

    flash_block_write@flash_data_buff	PTR unsigned char  size(2) Largest target is 64
		 -> main@flash_data(BANK1[64]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_flash_block_write
    _uart_send_string->_uart_send
    _uart_send_array->_uart_send
    _sprintf->___lwdiv
    _flash_block_write->___wmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                67    67      0    5432
                                             77 BANK0      2     2      0
                                              0 BANK1     65    65      0
                  _flash_block_write
                         _flash_read
                            _sprintf
                          _uart_init
                    _uart_send_array
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     3     1      2     238
                                              1 BANK0      3     1      2
                          _uart_send
 ---------------------------------------------------------------------------------
 (1) _uart_send_array                                      7     3      4     315
                                              1 BANK0      7     3      4
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            8     0      8     463
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             29    23      6    2437
                                              7 BANK0     20    14      6
                            ___lwdiv
                             ___wmul
                         _flash_read (ARG)
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _flash_read                                           6     4      2     213
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _flash_block_write                                   71    67      4    1559
                                              6 BANK0     71    67      4
                             ___wmul
                 _flash_block_commit
                 _flash_block_delete
 ---------------------------------------------------------------------------------
 (2) _flash_block_delete                                   2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _flash_block_commit                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     694
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _low_isr                                             17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flash_block_write
     ___wmul
     _flash_block_commit
     _flash_block_delete
   _flash_read
   _sprintf
     ___lwdiv
     ___wmul
     _flash_read (ARG)
     _isdigit (ARG)
   _uart_init
   _uart_send_array
     _uart_send
   _uart_send_string
     _uart_send

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     41      81       7       50.4%
BITBANK0            80      0       0       4        0.0%
BANK0               80     4F      4F       5       61.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1F      5F       1       75.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F      15        0.0%
DATA                 0      0     22F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Mar 24 19:59:19 2019

         __end_of_uart_send_string 0D26                                 l62 0B30  
                               l57 0A34                                 bsr 000FE0  
              ___wmul@multiplicand 0082                        __CFG_BORV$3 000000  
                     __CFG_CP0$OFF 000000                       __CFG_CP1$OFF 000000  
                     __CFG_CP2$OFF 000000                       __CFG_CP3$OFF 000000  
                              l100 0E48                                l101 0E46  
                              l161 0842                                l577 0C1A  
                     __CFG_CPB$OFF 000000                       __CFG_CPD$OFF 000000  
                              u811 08EC                                u905 0D5A  
                              u906 0D5C                                u885 0D42  
                              u886 0D44                                u895 0D4E  
                              u896 0D50                                prod 000FF3  
                              wreg 000FE8                       __CFG_LVP$OFF 000000  
                     __CFG_WDT$OFF 000000                               l1600 0C92  
                             l1522 0902                               l1620 067A  
                             l1604 0CC0                               l1542 0956  
                             l1614 065E                               l1702 0D08  
                             l1560 09B8                               l1536 093C  
                             l1616 0670                               l1608 0640  
                             l1626 06AA                               l1714 0A3E  
                             l1556 09AE                               l1484 0BCA  
                             l1468 0DF4                               l1660 07D8  
                             l1644 076A                               l1636 0720  
                             l1724 0A64                               l1574 0A10  
                             l1486 0BD6                               l1662 07E2  
                             l1638 074A                               l1718 0A48  
                             l1496 0C0C                               l1488 0BDC  
                             l1680 0848                               l1672 0810  
                             l1656 07A0                               l1674 081C  
                             l1690 08B2                               l1692 08CE  
                             l1688 08A6                               l1698 0CE8  
                             STR_1 0629                               STR_2 0618  
                             u1117 0AA6                               u1071 0A20  
                             _LATB 000F8A                               _main 0A16  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr2h 000FDA                               fsr0l 000FE9  
                             indf2 000FDF                               fsr1l 000FE1  
                             fsr2l 000FD9                               btemp 0060  
                             prodh 000FF4                               prodl 000FF3  
                             start 00AA                      __CFG_IESO$OFF 000000  
                    __CFG_MCLRE$ON 000000                       ___param_bank 000000  
             flash_read@flash_addr 0080                              ?_main 0041  
                  __end_of___lwdiv 0C24                              _RCREG 000FAE  
                            _SPBRG 000FAF                              _TRISB 000F93  
                            _TXREG 000FAD                      __CFG_PWRT$OFF 000000  
                    __CFG_WRT0$OFF 000000                      __CFG_WRT1$OFF 000000  
                    __CFG_WRT2$OFF 000000                      __CFG_WRT3$OFF 000000  
                   __CFG_EBTR0$OFF 000000                     __CFG_FCMEN$OFF 000000  
                   __CFG_EBTR1$OFF 000000                     __CFG_EBTR2$OFF 000000  
                   __CFG_EBTR3$OFF 000000                      __CFG_WRTB$OFF 000000  
                    __CFG_WRTC$OFF 000000                      __CFG_WRTD$OFF 000000  
                   __CFG_EBTRB$OFF 000000                    __end_of_isdigit 0DFE  
                            main@i 0140                    __end_of_low_isr 00AA  
                   __CFG_BOREN$OFF 000000                              pclath 000FFA  
                            tablat 000FF5                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
                  __end_of_sprintf 08DC                    __initialization 0D64  
                     __end_of_main 0B32                  ??_uart_send_array 0085  
                           ??_main 00CD                      __activetblptr 000002  
                           _EECON2 000FA7                             _TABLAT 000FF5  
                           _TBLPTR 000FF6                             _SPBRGH 000FB0  
                   __CFG_XINST$OFF 000000                   __end_of_high_isr 0BAC  
                           ___wmul 0D9E                     __CFG_STVREN$ON 000000  
                        ??___lwdiv 0060                             clear_0 0D6C  
                           clear_1 0D7E                             clear_2 0D8A  
      __size_of_flash_block_delete 0024        __size_of_flash_block_commit 001A  
                        ??_isdigit 0080                       __mediumconst 0000  
flash_block_write@flash_store_buff 008A                          ??_low_isr 004F  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          ??_sprintf 008D  
                       __accesstop 0080            __end_of__initialization 0D90  
                  __CFG_PBADEN$OFF 000000                      ___rparam_used 000001  
                   __pcstackCOMRAM 0041                  ?_uart_send_string 0081  
               ??_uart_send_string 0060                       sprintf@width 0098  
                       __pbssBANK1 0141                         __pbssBANK2 0200  
                   main@flash_data 0100                 flash_block_write@i 00CC  
                          ?___wmul 0080                 __size_of_uart_init 003E  
           flash_block_write@F3209 0001                 __size_of_uart_send 0012  
                       _flash_read 0C24                          ?_high_isr 0041  
                  _uart_send_array 0C8A                  flash_read@flash_h 0084  
                flash_read@flash_l 0085                            __Hparam 0000  
                          __Lparam 0000                    __size_of___wmul 0036  
                          ___lwdiv 0BAC                       __psmallconst 0600  
                          __pcinit 0D64                            __ramtop 0600  
                          __ptext0 0A16                            __ptext1 0CE0  
                          __ptext2 0C8A                            __ptext3 0E3C  
                          __ptext4 0D26                            __ptext5 0632  
                          __ptext6 0DD4                            __ptext7 0BAC  
                          __ptext8 0C24                            __ptext9 08DC  
                _flash_block_write 08DC                  __end_of_hexpowers 0609  
                uart_send_string@c 0081                  uart_send_string@i 0083  
                          _isdigit 0DD4                 ?_flash_block_write 0086  
                          _low_isr 0018                            _sprintf 0632  
                       ??_high_isr 0041                     __pintcode_body 0B32  
             end_of_initialization 0D90                ??_flash_block_write 0060  
                    __Lmediumconst 0000                            int_func 0B32  
                __end_of_uart_init 0D64                  __end_of_uart_send 0E4E  
                 uart_init@gen_reg 0080                          _RCSTAbits 000FAB  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
        __end_of_flash_block_write 0A16                        ?_flash_read 0080  
                        _TRISCbits 000F94            __end_of_uart_send_array 0CE0  
            __end_of_program_start 0618   flash_block_write@flash_data_buff 0088  
                        _TXSTAbits 000FAC         __end_of_flash_block_delete 0E22  
       __end_of_flash_block_commit 0E3C                     __end_of___wmul 0DD4  
                      _BAUDCONbits 000FB8                start_initialization 0D64  
        __size_of_uart_send_string 0046                   __CFG_OSC$INTIO67 000000  
              __size_of_flash_read 0066                           ??___wmul 0060  
                 __CFG_LPT1OSC$OFF 000000         __size_of_flash_block_write 013A  
                      __pbssCOMRAM 0001                      __pcstackBANK0 0080  
                    __pcstackBANK1 0100                   ?_uart_send_array 0081  
                __size_of_high_isr 0BA4                        sprintf@flag 0094  
                      sprintf@prec 0097                   ___lwdiv@dividend 0080  
                __CFG_CCP2MX$PORTC 000000                          __pintcode 0008  
                         ?___lwdiv 0080                        __pintcodelo 0018  
            flash_block_write@addr 0086                        __smallconst 0600  
                 uart_send_array@c 0081                   uart_send_array@i 0087  
                         ?_isdigit 0041                           ?_low_isr 0041  
                        _hexpowers 0601                   ___lwdiv@quotient 0085  
                         ?_sprintf 0087                     ___wmul@product 0084  
                         _IPR1bits 000F9F                           _PIE1bits 000F9D  
                         _RCONbits 000FD0                   __CFG_WDTPS$32768 000000  
                        main@F3214 0141                          _uart_init 0D26  
                        _uart_send 0E3C                         uart_send@c 0080  
                ___wmul@multiplier 0080                       ??_flash_read 0082  
               uart_send_array@len 0083                   _uart_send_string 0CE0  
                       _EECON1bits 000FA6                           __Hrparam 0000  
                         __Lrparam 0000                 __end_of_flash_read 0C8A  
                       ?_uart_init 0080                         ?_uart_send 0041  
                 __size_of___lwdiv 0078                        _isdigit$860 0081  
                       sprintf@idx 0091                         sprintf@val 0095  
                 __size_of_isdigit 002A                    ___lwdiv@divisor 0082  
               _flash_block_delete 0DFE                    ___lwdiv@counter 0084  
               _flash_block_commit 0E22                   __size_of_low_isr 0092  
                         __ptext10 0DFE                           __ptext11 0E22  
                         __ptext12 0D9E                           _high_isr 0008  
                 __size_of_sprintf 02AA                ?_flash_block_delete 0080  
              ?_flash_block_commit 0041                      __size_of_main 011C  
                   uart_init@brg16 0086         flash_block_write@flash_ptr 00CA  
                         int$flags 0060               ??_flash_block_delete 0060  
             ??_flash_block_commit 0060                         _INTCONbits 000FF2  
                         isdigit@c 0082                           intlevel1 0000  
                         intlevel2 0000                          sprintf@ap 0092  
                        sprintf@sp 0087                         _OSCCONbits 000FD3  
                    uart_init@brgh 0084                      uart_init@sync 0082  
                      ??_uart_init 0060                        ??_uart_send 0060  
           flash_block_delete@addr 0080                           sprintf@c 009A  
                         sprintf@f 0089                       _print_buffer 0200  
                    _program_start 0609           __size_of_uart_send_array 0056  
